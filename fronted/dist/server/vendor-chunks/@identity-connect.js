"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@identity-connect";
exports.ids = ["vendor-chunks/@identity-connect"];
exports.modules = {

/***/ "(ssr)/./node_modules/@identity-connect/api/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@identity-connect/api/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_BACKEND_URL: () => (/* binding */ DEFAULT_BACKEND_URL),\n/* harmony export */   NetworkName: () => (/* binding */ NetworkName),\n/* harmony export */   PairingStatus: () => (/* binding */ PairingStatus),\n/* harmony export */   SigningRequestStatus: () => (/* binding */ SigningRequestStatus),\n/* harmony export */   SigningRequestTypes: () => (/* binding */ SigningRequestTypes),\n/* harmony export */   WalletOSEnum: () => (/* binding */ WalletOSEnum),\n/* harmony export */   WalletPlatformEnum: () => (/* binding */ WalletPlatformEnum)\n/* harmony export */ });\n// src/constants.ts\nvar DEFAULT_BACKEND_URL = \"https://identityconnect.com\";\n\n// src/network.ts\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"DEVNET\"] = \"devnet\";\n  NetworkName2[\"MAINNET\"] = \"mainnet\";\n  NetworkName2[\"TESTNET\"] = \"testnet\";\n  return NetworkName2;\n})(NetworkName || {});\n\n// src/types/pairing.ts\nvar PairingStatus = /* @__PURE__ */ ((PairingStatus2) => {\n  PairingStatus2[\"Finalized\"] = \"FINALIZED\";\n  PairingStatus2[\"Pending\"] = \"PENDING\";\n  return PairingStatus2;\n})(PairingStatus || {});\n\n// src/types/signingRequest.ts\nvar SigningRequestTypes = /* @__PURE__ */ ((SigningRequestTypes2) => {\n  SigningRequestTypes2[\"SIGN_AND_SUBMIT_TRANSACTION\"] = \"SIGN_AND_SUBMIT_TRANSACTION\";\n  SigningRequestTypes2[\"SIGN_MESSAGE\"] = \"SIGN_MESSAGE\";\n  SigningRequestTypes2[\"SIGN_TRANSACTION\"] = \"SIGN_TRANSACTION\";\n  return SigningRequestTypes2;\n})(SigningRequestTypes || {});\nvar SigningRequestStatus = /* @__PURE__ */ ((SigningRequestStatus2) => {\n  SigningRequestStatus2[\"APPROVED\"] = \"APPROVED\";\n  SigningRequestStatus2[\"CANCELLED\"] = \"CANCELLED\";\n  SigningRequestStatus2[\"INVALID\"] = \"INVALID\";\n  SigningRequestStatus2[\"PENDING\"] = \"PENDING\";\n  SigningRequestStatus2[\"REJECTED\"] = \"REJECTED\";\n  return SigningRequestStatus2;\n})(SigningRequestStatus || {});\n\n// src/types/wallet.ts\nvar WalletOSEnum = /* @__PURE__ */ ((WalletOSEnum2) => {\n  WalletOSEnum2[\"Android\"] = \"android\";\n  WalletOSEnum2[\"IdentityConnect\"] = \"ic\";\n  WalletOSEnum2[\"Linux\"] = \"linux\";\n  WalletOSEnum2[\"Macos\"] = \"osx\";\n  WalletOSEnum2[\"Windows\"] = \"win\";\n  WalletOSEnum2[\"iOS\"] = \"ios\";\n  return WalletOSEnum2;\n})(WalletOSEnum || {});\nvar WalletPlatformEnum = /* @__PURE__ */ ((WalletPlatformEnum2) => {\n  WalletPlatformEnum2[\"BraveExtension\"] = \"brave-extension\";\n  WalletPlatformEnum2[\"ChromeExtension\"] = \"chrome-extension\";\n  WalletPlatformEnum2[\"FirefoxExtension\"] = \"firefox-extension\";\n  WalletPlatformEnum2[\"IcDappWallet\"] = \"ic-dapp-wallet\";\n  WalletPlatformEnum2[\"KiwiExtension\"] = \"kiwi-extension\";\n  WalletPlatformEnum2[\"NativeApp\"] = \"native-app\";\n  WalletPlatformEnum2[\"OperaExtension\"] = \"opera-extension\";\n  WalletPlatformEnum2[\"SafariExtension\"] = \"safari-extension\";\n  return WalletPlatformEnum2;\n})(WalletPlatformEnum || {});\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGlkZW50aXR5LWNvbm5lY3QvYXBpL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsbUJBQW1COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxxQkFBcUI7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMkJBQTJCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0JBQW9CO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEI7QUFTekI7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzaHJhdlxcYWkuYXB0LW1ldGFtb3ZlLWhhY2thdGhvblxcZnJvbnRlZFxcbm9kZV9tb2R1bGVzXFxAaWRlbnRpdHktY29ubmVjdFxcYXBpXFxkaXN0XFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbnN0YW50cy50c1xudmFyIERFRkFVTFRfQkFDS0VORF9VUkwgPSBcImh0dHBzOi8vaWRlbnRpdHljb25uZWN0LmNvbVwiO1xuXG4vLyBzcmMvbmV0d29yay50c1xudmFyIE5ldHdvcmtOYW1lID0gLyogQF9fUFVSRV9fICovICgoTmV0d29ya05hbWUyKSA9PiB7XG4gIE5ldHdvcmtOYW1lMltcIkRFVk5FVFwiXSA9IFwiZGV2bmV0XCI7XG4gIE5ldHdvcmtOYW1lMltcIk1BSU5ORVRcIl0gPSBcIm1haW5uZXRcIjtcbiAgTmV0d29ya05hbWUyW1wiVEVTVE5FVFwiXSA9IFwidGVzdG5ldFwiO1xuICByZXR1cm4gTmV0d29ya05hbWUyO1xufSkoTmV0d29ya05hbWUgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvcGFpcmluZy50c1xudmFyIFBhaXJpbmdTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChQYWlyaW5nU3RhdHVzMikgPT4ge1xuICBQYWlyaW5nU3RhdHVzMltcIkZpbmFsaXplZFwiXSA9IFwiRklOQUxJWkVEXCI7XG4gIFBhaXJpbmdTdGF0dXMyW1wiUGVuZGluZ1wiXSA9IFwiUEVORElOR1wiO1xuICByZXR1cm4gUGFpcmluZ1N0YXR1czI7XG59KShQYWlyaW5nU3RhdHVzIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL3NpZ25pbmdSZXF1ZXN0LnRzXG52YXIgU2lnbmluZ1JlcXVlc3RUeXBlcyA9IC8qIEBfX1BVUkVfXyAqLyAoKFNpZ25pbmdSZXF1ZXN0VHlwZXMyKSA9PiB7XG4gIFNpZ25pbmdSZXF1ZXN0VHlwZXMyW1wiU0lHTl9BTkRfU1VCTUlUX1RSQU5TQUNUSU9OXCJdID0gXCJTSUdOX0FORF9TVUJNSVRfVFJBTlNBQ1RJT05cIjtcbiAgU2lnbmluZ1JlcXVlc3RUeXBlczJbXCJTSUdOX01FU1NBR0VcIl0gPSBcIlNJR05fTUVTU0FHRVwiO1xuICBTaWduaW5nUmVxdWVzdFR5cGVzMltcIlNJR05fVFJBTlNBQ1RJT05cIl0gPSBcIlNJR05fVFJBTlNBQ1RJT05cIjtcbiAgcmV0dXJuIFNpZ25pbmdSZXF1ZXN0VHlwZXMyO1xufSkoU2lnbmluZ1JlcXVlc3RUeXBlcyB8fCB7fSk7XG52YXIgU2lnbmluZ1JlcXVlc3RTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChTaWduaW5nUmVxdWVzdFN0YXR1czIpID0+IHtcbiAgU2lnbmluZ1JlcXVlc3RTdGF0dXMyW1wiQVBQUk9WRURcIl0gPSBcIkFQUFJPVkVEXCI7XG4gIFNpZ25pbmdSZXF1ZXN0U3RhdHVzMltcIkNBTkNFTExFRFwiXSA9IFwiQ0FOQ0VMTEVEXCI7XG4gIFNpZ25pbmdSZXF1ZXN0U3RhdHVzMltcIklOVkFMSURcIl0gPSBcIklOVkFMSURcIjtcbiAgU2lnbmluZ1JlcXVlc3RTdGF0dXMyW1wiUEVORElOR1wiXSA9IFwiUEVORElOR1wiO1xuICBTaWduaW5nUmVxdWVzdFN0YXR1czJbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbiAgcmV0dXJuIFNpZ25pbmdSZXF1ZXN0U3RhdHVzMjtcbn0pKFNpZ25pbmdSZXF1ZXN0U3RhdHVzIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL3dhbGxldC50c1xudmFyIFdhbGxldE9TRW51bSA9IC8qIEBfX1BVUkVfXyAqLyAoKFdhbGxldE9TRW51bTIpID0+IHtcbiAgV2FsbGV0T1NFbnVtMltcIkFuZHJvaWRcIl0gPSBcImFuZHJvaWRcIjtcbiAgV2FsbGV0T1NFbnVtMltcIklkZW50aXR5Q29ubmVjdFwiXSA9IFwiaWNcIjtcbiAgV2FsbGV0T1NFbnVtMltcIkxpbnV4XCJdID0gXCJsaW51eFwiO1xuICBXYWxsZXRPU0VudW0yW1wiTWFjb3NcIl0gPSBcIm9zeFwiO1xuICBXYWxsZXRPU0VudW0yW1wiV2luZG93c1wiXSA9IFwid2luXCI7XG4gIFdhbGxldE9TRW51bTJbXCJpT1NcIl0gPSBcImlvc1wiO1xuICByZXR1cm4gV2FsbGV0T1NFbnVtMjtcbn0pKFdhbGxldE9TRW51bSB8fCB7fSk7XG52YXIgV2FsbGV0UGxhdGZvcm1FbnVtID0gLyogQF9fUFVSRV9fICovICgoV2FsbGV0UGxhdGZvcm1FbnVtMikgPT4ge1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiQnJhdmVFeHRlbnNpb25cIl0gPSBcImJyYXZlLWV4dGVuc2lvblwiO1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiQ2hyb21lRXh0ZW5zaW9uXCJdID0gXCJjaHJvbWUtZXh0ZW5zaW9uXCI7XG4gIFdhbGxldFBsYXRmb3JtRW51bTJbXCJGaXJlZm94RXh0ZW5zaW9uXCJdID0gXCJmaXJlZm94LWV4dGVuc2lvblwiO1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiSWNEYXBwV2FsbGV0XCJdID0gXCJpYy1kYXBwLXdhbGxldFwiO1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiS2l3aUV4dGVuc2lvblwiXSA9IFwia2l3aS1leHRlbnNpb25cIjtcbiAgV2FsbGV0UGxhdGZvcm1FbnVtMltcIk5hdGl2ZUFwcFwiXSA9IFwibmF0aXZlLWFwcFwiO1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiT3BlcmFFeHRlbnNpb25cIl0gPSBcIm9wZXJhLWV4dGVuc2lvblwiO1xuICBXYWxsZXRQbGF0Zm9ybUVudW0yW1wiU2FmYXJpRXh0ZW5zaW9uXCJdID0gXCJzYWZhcmktZXh0ZW5zaW9uXCI7XG4gIHJldHVybiBXYWxsZXRQbGF0Zm9ybUVudW0yO1xufSkoV2FsbGV0UGxhdGZvcm1FbnVtIHx8IHt9KTtcbmV4cG9ydCB7XG4gIERFRkFVTFRfQkFDS0VORF9VUkwsXG4gIE5ldHdvcmtOYW1lLFxuICBQYWlyaW5nU3RhdHVzLFxuICBTaWduaW5nUmVxdWVzdFN0YXR1cyxcbiAgU2lnbmluZ1JlcXVlc3RUeXBlcyxcbiAgV2FsbGV0T1NFbnVtLFxuICBXYWxsZXRQbGF0Zm9ybUVudW1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/api/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@identity-connect/crypto/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@identity-connect/crypto/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountConnectionAction: () => (/* binding */ AccountConnectionAction),\n/* harmony export */   DecryptionError: () => (/* binding */ DecryptionError),\n/* harmony export */   EncryptionEnvelopeError: () => (/* binding */ EncryptionEnvelopeError),\n/* harmony export */   EnvelopeMessageMismatchError: () => (/* binding */ EnvelopeMessageMismatchError),\n/* harmony export */   KeyTypes: () => (/* binding */ KeyTypes),\n/* harmony export */   REQUIRED_FIELDS: () => (/* binding */ REQUIRED_FIELDS),\n/* harmony export */   SIGNATURE_PREFIX: () => (/* binding */ SIGNATURE_PREFIX),\n/* harmony export */   aptosAccountToEd25519Keypair: () => (/* binding */ aptosAccountToEd25519Keypair),\n/* harmony export */   aptosAccountToSerializedInfo: () => (/* binding */ aptosAccountToSerializedInfo),\n/* harmony export */   concatUint8array: () => (/* binding */ concatUint8array),\n/* harmony export */   constructMetadata: () => (/* binding */ constructMetadata),\n/* harmony export */   convertEd25519PublicKeyToX25519PublicKey: () => (/* binding */ convertEd25519PublicKeyToX25519PublicKey),\n/* harmony export */   convertEd25519SecretKeyToX25519SecretKey: () => (/* binding */ convertEd25519SecretKeyToX25519SecretKey),\n/* harmony export */   createEd25519KeyPair: () => (/* binding */ createEd25519KeyPair),\n/* harmony export */   createSerializedAccountInfo: () => (/* binding */ createSerializedAccountInfo),\n/* harmony export */   createX25519KeyPair: () => (/* binding */ createX25519KeyPair),\n/* harmony export */   dangerouslyEncryptAndSignEnvelopeUnvalidated: () => (/* binding */ dangerouslyEncryptAndSignEnvelopeUnvalidated),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   decryptEnvelope: () => (/* binding */ decryptEnvelope),\n/* harmony export */   decryptMessage: () => (/* binding */ decryptMessage),\n/* harmony export */   decryptMessageDirect: () => (/* binding */ decryptMessageDirect),\n/* harmony export */   decryptObject: () => (/* binding */ decryptObject),\n/* harmony export */   decryptObjectDirect: () => (/* binding */ decryptObjectDirect),\n/* harmony export */   decryptSerializedEncryptionResult: () => (/* binding */ decryptSerializedEncryptionResult),\n/* harmony export */   decryptSerializedEncryptionResultDirect: () => (/* binding */ decryptSerializedEncryptionResultDirect),\n/* harmony export */   deriveAccountTransportEd25519Keypair: () => (/* binding */ deriveAccountTransportEd25519Keypair),\n/* harmony export */   deserializeEd25519PublicKeyB64: () => (/* binding */ deserializeEd25519PublicKeyB64),\n/* harmony export */   deserializeEd25519SignatureB64: () => (/* binding */ deserializeEd25519SignatureB64),\n/* harmony export */   deserializeEncryptionResult: () => (/* binding */ deserializeEncryptionResult),\n/* harmony export */   deserializePublicKeyB64: () => (/* binding */ deserializePublicKeyB64),\n/* harmony export */   deserializeSignatureB64: () => (/* binding */ deserializeSignatureB64),\n/* harmony export */   deserializeTransportEnvelope: () => (/* binding */ deserializeTransportEnvelope),\n/* harmony export */   ed25519KeypairFromSecret: () => (/* binding */ ed25519KeypairFromSecret),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   encryptAndSignEnvelope: () => (/* binding */ encryptAndSignEnvelope),\n/* harmony export */   encryptMessage: () => (/* binding */ encryptMessage),\n/* harmony export */   encryptMessageDirect: () => (/* binding */ encryptMessageDirect),\n/* harmony export */   encryptObject: () => (/* binding */ encryptObject),\n/* harmony export */   encryptObjectDirect: () => (/* binding */ encryptObjectDirect),\n/* harmony export */   ensureMetadataFields: () => (/* binding */ ensureMetadataFields),\n/* harmony export */   ensurePrivatePublicFieldsDisjoint: () => (/* binding */ ensurePrivatePublicFieldsDisjoint),\n/* harmony export */   hashAndVerifySignature: () => (/* binding */ hashAndVerifySignature),\n/* harmony export */   keypairToEd25519: () => (/* binding */ keypairToEd25519),\n/* harmony export */   keypairToX25519: () => (/* binding */ keypairToX25519),\n/* harmony export */   makeEd25519SecretKeySignCallbackNoDomainSeparation: () => (/* binding */ makeEd25519SecretKeySignCallbackNoDomainSeparation),\n/* harmony export */   messageHash: () => (/* binding */ messageHash),\n/* harmony export */   publicKeyB64FromEd25519PublicKeyB64: () => (/* binding */ publicKeyB64FromEd25519PublicKeyB64),\n/* harmony export */   serializeEncryptionResult: () => (/* binding */ serializeEncryptionResult),\n/* harmony export */   serializePublicKeyB64: () => (/* binding */ serializePublicKeyB64),\n/* harmony export */   serializeSignatureB64: () => (/* binding */ serializeSignatureB64),\n/* harmony export */   signWithEd25519SecretKey: () => (/* binding */ signWithEd25519SecretKey),\n/* harmony export */   toKey: () => (/* binding */ toKey),\n/* harmony export */   verifyEnvelopeSignature: () => (/* binding */ verifyEnvelopeSignature),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var ed2curve__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ed2curve */ \"(ssr)/./node_modules/ed2curve/ed2curve.js\");\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n// src/encrDecr.ts\n\n\n\n\n\n// src/errors.ts\nvar EncryptionEnvelopeError = class extends Error {\n};\nvar EnvelopeMessageMismatchError = class _EnvelopeMessageMismatchError extends EncryptionEnvelopeError {\n  constructor(message, field) {\n    super(message);\n    this.field = field;\n    this.name = \"EnvelopeMessageMismatchError\";\n    Object.setPrototypeOf(this, _EnvelopeMessageMismatchError.prototype);\n  }\n};\nvar DecryptionError = class _DecryptionError extends EncryptionEnvelopeError {\n  constructor(message) {\n    super(message);\n    this.name = \"DecryptionError\";\n    Object.setPrototypeOf(this, _DecryptionError.prototype);\n  }\n};\n\n// src/utils.ts\n\nvar KeyTypes = /* @__PURE__ */ ((KeyTypes2) => {\n  KeyTypes2[\"Ed25519PublicKey\"] = \"Ed25519PublicKey\";\n  KeyTypes2[\"Ed25519SecretKey\"] = \"Ed25519SecretKey\";\n  KeyTypes2[\"X25519PublicKey\"] = \"X25519PublicKey\";\n  KeyTypes2[\"X25519SecretKey\"] = \"X25519SecretKey\";\n  return KeyTypes2;\n})(KeyTypes || {});\nfunction createX25519KeyPair() {\n  return keypairToX25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.keyPair());\n}\nfunction createEd25519KeyPair() {\n  return keypairToEd25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.keyPair());\n}\nfunction toKey(rawKey, type) {\n  return {\n    key: rawKey,\n    type\n  };\n}\nfunction keypairToEd25519(keyPair) {\n  return {\n    publicKey: toKey(keyPair.publicKey, \"Ed25519PublicKey\" /* Ed25519PublicKey */),\n    secretKey: toKey(keyPair.secretKey, \"Ed25519SecretKey\" /* Ed25519SecretKey */)\n  };\n}\nfunction keypairToX25519(keyPair) {\n  return {\n    publicKey: toKey(keyPair.publicKey, \"X25519PublicKey\" /* X25519PublicKey */),\n    secretKey: toKey(keyPair.secretKey, \"X25519SecretKey\" /* X25519SecretKey */)\n  };\n}\nfunction aptosAccountToEd25519Keypair(account) {\n  return ed25519KeypairFromSecret(account.signingKey.secretKey);\n}\nfunction ed25519KeypairFromSecret(ed25519SecretKeyBytes) {\n  return keypairToEd25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.keyPair.fromSeed(ed25519SecretKeyBytes.slice(0, 32)));\n}\nfunction decodeBase64(base64Str) {\n  if (globalThis.Buffer) {\n    return new Uint8Array(Buffer.from(base64Str, \"base64\"));\n  }\n  return Uint8Array.from(atob(base64Str), (m) => m.codePointAt(0));\n}\nfunction encodeBase64(bytes) {\n  if (globalThis.Buffer) {\n    return Buffer.from(bytes).toString(\"base64\");\n  }\n  return btoa(Array.from(bytes, (x) => String.fromCodePoint(x)).join(\"\"));\n}\nfunction concatUint8array(arrayOne, arrayTwo) {\n  const mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);\n  mergedArray.set(arrayOne);\n  mergedArray.set(arrayTwo, arrayOne.length);\n  return mergedArray;\n}\n\n// src/encrDecr.ts\nvar SIGNATURE_PREFIX = \"APTOS::IDENTITY_CONNECT\";\nfunction convertEd25519PublicKeyToX25519PublicKey(ed25519PublicKey, errorKeyName) {\n  const x25519PublicKey = ed2curve__WEBPACK_IMPORTED_MODULE_2__.convertPublicKey(ed25519PublicKey.key.slice(0, 32));\n  if (!x25519PublicKey)\n    throw new Error(`${errorKeyName} is not a valid Ed25519 public key`);\n  return toKey(x25519PublicKey, \"X25519PublicKey\" /* X25519PublicKey */);\n}\nfunction convertEd25519SecretKeyToX25519SecretKey(ed25519SecretKey) {\n  const x25519SecretKey = ed2curve__WEBPACK_IMPORTED_MODULE_2__.convertSecretKey(ed25519SecretKey.key.slice(0, 32));\n  return toKey(x25519SecretKey, \"X25519SecretKey\" /* X25519SecretKey */);\n}\nfunction serializeEncryptionResult(enc) {\n  return {\n    nonceB64: encodeBase64(enc.nonce),\n    securedB64: encodeBase64(enc.secured)\n  };\n}\nfunction deserializeEncryptionResult(enc) {\n  return {\n    nonce: decodeBase64(enc.nonceB64),\n    secured: decodeBase64(enc.securedB64)\n  };\n}\nfunction decryptSerializedEncryptionResult(senderX25519PublicKey, receiverEd25519SecretKey, enc) {\n  const des = deserializeEncryptionResult(enc);\n  return decryptObject(senderX25519PublicKey, receiverEd25519SecretKey, des.secured, des.nonce);\n}\nfunction decryptSerializedEncryptionResultDirect(senderX25519PublicKey, receiverX25519SecretKey, enc) {\n  const des = deserializeEncryptionResult(enc);\n  return decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, des.secured, des.nonce);\n}\nfunction encryptMessage(senderX25519SecretKey, receiverEd25519PublicKey, message) {\n  const receiverX25519PublicKey = convertEd25519PublicKeyToX25519PublicKey(\n    receiverEd25519PublicKey,\n    \"receiver public key\"\n  );\n  return encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, message);\n}\nfunction encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, message) {\n  const nonce = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.randomBytes(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.nonceLength);\n  const messageUint8 = new TextEncoder().encode(message);\n  const secured = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box(messageUint8, nonce, receiverX25519PublicKey.key, senderX25519SecretKey.key.slice(0, 32));\n  return { nonce, secured };\n}\nfunction encryptObject(senderX25519SecretKey, receiverEd25519PublicKey, message) {\n  const receiverX25519PublicKey = convertEd25519PublicKeyToX25519PublicKey(\n    receiverEd25519PublicKey,\n    \"receiver public key\"\n  );\n  return encryptObjectDirect(senderX25519SecretKey, receiverX25519PublicKey, message);\n}\nfunction encryptObjectDirect(senderX25519SecretKey, receiverX25519PublicKey, message) {\n  return encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, JSON.stringify(message));\n}\nfunction decryptMessage(senderX25519PublicKey, receiverEd25519SecretKey, securedMessage, nonce) {\n  const receiverX25519SecretKey = convertEd25519SecretKeyToX25519SecretKey(receiverEd25519SecretKey);\n  return decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n}\nfunction decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce) {\n  let decryptedUint8;\n  try {\n    decryptedUint8 = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.open(\n      securedMessage,\n      nonce,\n      senderX25519PublicKey.key.slice(0, 32),\n      receiverX25519SecretKey.key.slice(0, 32)\n    );\n  } catch (e) {\n    throw new DecryptionError(`Could not decrypt message: ${e.message}`);\n  }\n  if (!decryptedUint8)\n    throw new DecryptionError(\"Could not decrypt message\");\n  return new TextDecoder().decode(decryptedUint8);\n}\nfunction decryptObject(senderX25519PublicKey, receiverEd25519SecretKey, securedMessage, nonce) {\n  const receiverX25519SecretKey = convertEd25519SecretKeyToX25519SecretKey(receiverEd25519SecretKey);\n  return decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n}\nfunction decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce) {\n  const decryptedStr = decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n  return JSON.parse(decryptedStr);\n}\nfunction messageHash(message, purpose) {\n  const signaturePrefixHash = new Uint8Array((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(`${SIGNATURE_PREFIX}::${purpose}::`));\n  return new Uint8Array((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(concatUint8array(signaturePrefixHash, message)));\n}\nfunction signWithEd25519SecretKey(message, signingEd25519SecretKey, purpose) {\n  return tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.detached(messageHash(message, purpose), signingEd25519SecretKey.key);\n}\nfunction makeEd25519SecretKeySignCallbackNoDomainSeparation(signingEd25519SecretKey) {\n  return async (message) => new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.detached(message, signingEd25519SecretKey.key));\n}\nfunction verifySignature(message, signature, signingPublicKey, purpose) {\n  return signingPublicKey.verifySignature({ message: messageHash(message, purpose), signature });\n}\nfunction hashAndVerifySignature(message, signature, signingPublicKey, purpose) {\n  const messageUint8 = message instanceof Uint8Array ? message : new TextEncoder().encode(message);\n  const messageUint8Hash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(messageUint8);\n  return verifySignature(messageUint8Hash, signature, signingPublicKey, purpose);\n}\n\n// src/securedEnvelope.ts\n\n\nvar REQUIRED_FIELDS = [\n  \"receiverEd25519PublicKeyB64\",\n  \"senderEd25519PublicKeyB64\",\n  \"senderX25519PublicKeyB64\",\n  \"sequence\",\n  \"timestampMillis\"\n].sort();\nfunction ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage) {\n  const intersection = Object.keys(privateMessage).filter((x) => Object.keys(publicMessage).includes(x));\n  if (intersection.length > 0) {\n    const field = intersection[0];\n    throw new EnvelopeMessageMismatchError(`Field ${field} appears in both private and public message fields`, field);\n  }\n}\nfunction ensureMetadataFields(message) {\n  const messageKeys = Object.keys(message).sort();\n  const extraFields = messageKeys.filter((key) => !REQUIRED_FIELDS.includes(key));\n  const missingFields = REQUIRED_FIELDS.filter((key) => !messageKeys.includes(key));\n  if (extraFields.length > 0 || missingFields.length > 0) {\n    let extraFieldsStr = extraFields.length > 0 ? `extra(${extraFields.join(\", \")})` : \"\";\n    const missingFieldsStr = missingFields.length > 0 ? `missing(${missingFields.join(\", \")})` : \"\";\n    extraFieldsStr = extraFieldsStr.length > 0 && missingFieldsStr.length > 0 ? `${extraFieldsStr}, ` : extraFieldsStr;\n    throw new EnvelopeMessageMismatchError(\n      `PublicMessage metadata fields do not conform to spec: ${extraFieldsStr}${missingFieldsStr}`,\n      \"_metadata\"\n    );\n  }\n}\nfunction deserializeTransportEnvelope(transportEnvelope) {\n  const publicMessage = JSON.parse(transportEnvelope.serializedPublicMessage);\n  return {\n    ...transportEnvelope,\n    publicMessage\n  };\n}\nfunction encryptAndSignEnvelope(senderEd25519SecretKey, senderEd25519PublicKey, receiverEd25519PublicKey, sequence, publicMessage, privateMessage) {\n  const senderEphemeralX25519KeyPair = createX25519KeyPair();\n  const metadata = constructMetadata(\n    senderEd25519PublicKey,\n    receiverEd25519PublicKey,\n    sequence,\n    senderEphemeralX25519KeyPair.publicKey\n  );\n  ensureMetadataFields(metadata);\n  ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage);\n  return dangerouslyEncryptAndSignEnvelopeUnvalidated(\n    senderEd25519SecretKey,\n    receiverEd25519PublicKey,\n    metadata,\n    privateMessage,\n    publicMessage,\n    senderEphemeralX25519KeyPair\n  );\n}\nfunction constructMetadata(senderEd25519PublicKey, receiverEd25519PublicKey, sequence, senderEphemeralX25519PublicKey) {\n  return {\n    receiverEd25519PublicKeyB64: encodeBase64(receiverEd25519PublicKey.key),\n    senderEd25519PublicKeyB64: encodeBase64(senderEd25519PublicKey.key),\n    senderX25519PublicKeyB64: encodeBase64(senderEphemeralX25519PublicKey.key),\n    sequence,\n    timestampMillis: Date.now()\n  };\n}\nfunction dangerouslyEncryptAndSignEnvelopeUnvalidated(senderEd25519SecretKey, receiverEd25519PublicKey, metadata, privateMessage, publicMessage, senderEphemeralX25519KeyPair) {\n  const encryptionResult = encryptObject(\n    senderEphemeralX25519KeyPair.secretKey,\n    receiverEd25519PublicKey,\n    privateMessage\n  );\n  const encryptedPrivateMessage = serializeEncryptionResult(encryptionResult);\n  const encryptedPrivateMessageBytes = decodeBase64(encryptedPrivateMessage.securedB64);\n  const serializedPublicMessage = JSON.stringify({ ...publicMessage, _metadata: metadata });\n  const publicMessageBytes = new TextEncoder().encode(serializedPublicMessage);\n  const messageSignature = signEnvelope(publicMessageBytes, encryptedPrivateMessageBytes, senderEd25519SecretKey);\n  return {\n    encryptedPrivateMessage,\n    messageSignature,\n    serializedPublicMessage\n  };\n}\nfunction combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes) {\n  const publicMessageBytesHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(publicMessageBytes);\n  const privateMessageBytesHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(privateMessageBytes);\n  const combinedHash = new Uint8Array(publicMessageBytesHash.length + privateMessageBytesHash.length);\n  combinedHash.set(publicMessageBytesHash);\n  combinedHash.set(privateMessageBytesHash, publicMessageBytesHash.length);\n  return (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(combinedHash);\n}\nfunction signEnvelope(publicMessageBytes, privateMessageBytes, senderEd25519SecretKey) {\n  const messageHashBytes = combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes);\n  const signatureBytes = signWithEd25519SecretKey(messageHashBytes, senderEd25519SecretKey, \"SECURED_ENVELOPE\");\n  return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(signatureBytes).toString();\n}\nfunction verifyEnvelopeSignature(publicMessageBytes, privateMessageBytes, messageSignatureInput, senderEd25519PublicKey) {\n  const messageSignature = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(messageSignatureInput).toUint8Array());\n  const senderPublicKey = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey(senderEd25519PublicKey.key);\n  const messageHashBytes = combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes);\n  const messageVerified = verifySignature(messageHashBytes, messageSignature, senderPublicKey, \"SECURED_ENVELOPE\");\n  if (!messageVerified) {\n    throw new EnvelopeMessageMismatchError(\"Could not verify SecuredEnvelope signature\", \"messageSignature\");\n  }\n}\nfunction decryptEnvelope(senderEd25519PublicKey, receiverEd25519SecretKey, message) {\n  const { encryptedPrivateMessage, messageSignature, serializedPublicMessage } = message;\n  const publicMessage = JSON.parse(serializedPublicMessage);\n  const rawPrivateMessage = decodeBase64(encryptedPrivateMessage.securedB64);\n  const rawPublicMessage = new TextEncoder().encode(serializedPublicMessage);\n  verifyEnvelopeSignature(rawPublicMessage, rawPrivateMessage, messageSignature, senderEd25519PublicKey);\n  const senderEd25519PublicKeyB64 = encodeBase64(senderEd25519PublicKey.key);\n  const expectedPublicKeyB64 = publicMessage._metadata.senderEd25519PublicKeyB64;\n  if (senderEd25519PublicKeyB64 !== expectedPublicKeyB64) {\n    throw new EnvelopeMessageMismatchError(\n      \"senderEd25519PublicKey in envelope does not match provided receiverEd25519SecretKey\",\n      \"senderPublicKey\"\n    );\n  }\n  const senderX25519PublicKeyBytes = decodeBase64(publicMessage._metadata.senderX25519PublicKeyB64);\n  const senderX25519PublicKey = toKey(senderX25519PublicKeyBytes, \"X25519PublicKey\" /* X25519PublicKey */);\n  const encryptionResult = deserializeEncryptionResult(encryptedPrivateMessage);\n  const privateMessage = decryptObject(\n    senderX25519PublicKey,\n    receiverEd25519SecretKey,\n    encryptionResult.secured,\n    encryptionResult.nonce\n  );\n  ensureMetadataFields(publicMessage._metadata);\n  ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage);\n  return {\n    messageSignature,\n    privateMessage,\n    publicMessage\n  };\n}\n\n// src/serialization.ts\n\n\nfunction serializePublicKeyB64(publicKey) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.serializePublicKey)(serializer, publicKey);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.bytesToBase64)(serializer.toUint8Array());\n}\nfunction deserializePublicKeyB64(publicKeyB64) {\n  const serializedPublicKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.base64ToBytes)(publicKeyB64);\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(serializedPublicKey);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.deserializePublicKey)(deserializer);\n}\nfunction deserializeEd25519PublicKeyB64(ed25519PublicKeyB64) {\n  return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey(decodeBase64(ed25519PublicKeyB64));\n}\nfunction serializeSignatureB64(signature) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.serializeSignature)(serializer, signature);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.bytesToBase64)(serializer.toUint8Array());\n}\nfunction deserializeSignatureB64(signatureB64) {\n  const serializedSignature = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.base64ToBytes)(signatureB64);\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(serializedSignature);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.deserializeSignature)(deserializer);\n}\nfunction deserializeEd25519SignatureB64(ed25519SignatureB64) {\n  const signatureBytes = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(ed25519SignatureB64).toUint8Array();\n  return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(signatureBytes);\n}\nfunction publicKeyB64FromEd25519PublicKeyB64(ed25519PublicKeyB64) {\n  const publicKey = deserializeEd25519PublicKeyB64(ed25519PublicKeyB64);\n  return serializePublicKeyB64(publicKey);\n}\n\n// src/walletAccounts.ts\n\n\nvar AccountConnectionAction = /* @__PURE__ */ ((AccountConnectionAction2) => {\n  AccountConnectionAction2[\"ADD\"] = \"add\";\n  AccountConnectionAction2[\"REMOVE\"] = \"remove\";\n  return AccountConnectionAction2;\n})(AccountConnectionAction || {});\nfunction deriveAccountTransportEd25519Keypair(ed25519SecretKeyOrSignCallback, publicKey) {\n  const publicKeyBytes = publicKey instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey ? publicKey.toUint8Array() : publicKey.key;\n  if (ed25519SecretKeyOrSignCallback instanceof Function) {\n    const seedGeneratorBytes = messageHash(publicKeyBytes, \"TRANSPORT_KEYPAIR\");\n    const signature = ed25519SecretKeyOrSignCallback(seedGeneratorBytes);\n    if (signature instanceof Promise) {\n      return signature.then((value) => ed25519KeypairFromSecret(value.toUint8Array()));\n    }\n    return ed25519KeypairFromSecret(signature.toUint8Array());\n  }\n  const seedBytes = signWithEd25519SecretKey(publicKeyBytes, ed25519SecretKeyOrSignCallback, \"TRANSPORT_KEYPAIR\");\n  return ed25519KeypairFromSecret(seedBytes);\n}\nfunction createSerializedAccountInfo(...[\n  signCallback,\n  publicKey,\n  transportEd25519PublicKey,\n  action,\n  intentId,\n  accountAddress\n]) {\n  const authKey = publicKey.authKey();\n  const finalAccountAddress = accountAddress || authKey.derivedAddress().toString();\n  const publicKeyB64 = serializePublicKeyB64(publicKey);\n  const accountInfo = {\n    accountAddress: finalAccountAddress,\n    action,\n    intentId,\n    publicKeyB64,\n    timestampMillis: Date.now(),\n    transportEd25519PublicKeyB64: encodeBase64(transportEd25519PublicKey.key)\n  };\n  const accountInfoSerialized = JSON.stringify(accountInfo);\n  const accountInfoBytes = new TextEncoder().encode(accountInfoSerialized);\n  const accountInfoHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(accountInfoBytes);\n  const signature = signCallback(messageHash(accountInfoHash, \"ACCOUNT_INFO\"));\n  if (signature instanceof Promise) {\n    return signature.then((value) => ({\n      accountInfoSerialized,\n      signatureB64: serializeSignatureB64(value)\n    }));\n  }\n  return {\n    accountInfoSerialized,\n    signatureB64: serializeSignatureB64(signature)\n  };\n}\nasync function aptosAccountToSerializedInfo(account, intentId) {\n  const signCallback = async (data) => account.sign(data);\n  const transportKey = await deriveAccountTransportEd25519Keypair(signCallback, account.publicKey);\n  return createSerializedAccountInfo(\n    signCallback,\n    account.publicKey,\n    transportKey.publicKey,\n    \"add\" /* ADD */,\n    intentId\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/crypto/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@identity-connect/dapp-sdk/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@identity-connect/dapp-sdk/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACDappClient: () => (/* binding */ ACDappClient),\n/* harmony export */   ACKeylessClient: () => (/* binding */ ACKeylessClient),\n/* harmony export */   DAPP_PAIRINGS_WINDOW_STORAGE_KEY: () => (/* binding */ DAPP_PAIRINGS_WINDOW_STORAGE_KEY),\n/* harmony export */   ICDappClient: () => (/* binding */ ICDappClient),\n/* harmony export */   windowStateAccessors: () => (/* binding */ windowStateAccessors)\n/* harmony export */ });\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aptos-connect/web-transport */ \"(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@aptos-connect/web-transport/dist/index.mjs\");\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @identity-connect/api */ \"(ssr)/./node_modules/@identity-connect/api/dist/index.mjs\");\n/* harmony import */ var _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @identity-connect/crypto */ \"(ssr)/./node_modules/@identity-connect/crypto/dist/index.mjs\");\n/* harmony import */ var _identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @identity-connect/wallet-api */ \"(ssr)/./node_modules/@identity-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n// src/ACDappClient.ts\n\n\n\n\n\n\n// src/constants.ts\nvar DEFAULT_FRONTEND_URL = \"https://aptosconnect.app\";\n\n// src/conversion.ts\n\nfunction convertToSerializableArgument(argument) {\n  if (argument === void 0 || argument === null) {\n    return argument;\n  }\n  if (Array.isArray(argument)) {\n    return argument.map((subArgument) => convertToSerializableArgument(subArgument));\n  }\n  if (typeof argument === \"string\" || typeof argument === \"number\" || typeof argument === \"boolean\" || argument instanceof Uint8Array) {\n    return argument;\n  }\n  if (typeof argument === \"bigint\") {\n    return argument.toString();\n  }\n  if (argument instanceof ArrayBuffer) {\n    return new Uint8Array(argument);\n  }\n  if (\"values\" in argument) {\n    return argument.values.map((subArgument) => convertToSerializableArgument(subArgument));\n  }\n  if (\"data\" in argument) {\n    return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(argument.data).toString();\n  }\n  if (argument.value === void 0) {\n    return void 0;\n  }\n  if (typeof argument.value === \"string\" || typeof argument.value === \"number\" || typeof argument.value === \"boolean\" || argument.value instanceof Uint8Array) {\n    return argument.value;\n  }\n  if (typeof argument.value === \"bigint\") {\n    return argument.value.toString();\n  }\n  throw new Error(\"Unexpected argument\");\n}\nfunction normalizePayloadForIC(payload, aptosConfig) {\n  if (\"bcsToBytes\" in payload) {\n    return payload;\n  }\n  if (\"bytecode\" in payload) {\n    return (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayload)(payload);\n  }\n  if (aptosConfig) {\n    return payload.abi !== void 0 ? (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayloadWithABI)({ ...payload, abi: payload.abi }) : (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayload)({ aptosConfig, ...payload });\n  }\n  const entryFunctionPayload = {\n    arguments: payload.functionArguments.map(convertToSerializableArgument),\n    function: payload.function,\n    type: \"entry_function_payload\",\n    type_arguments: (payload.typeArguments ?? []).map((ta) => ta.toString())\n  };\n  return \"multisigAddress\" in payload ? {\n    multisig_address: _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(payload.multisigAddress).toString(),\n    transaction_payload: entryFunctionPayload,\n    type: \"multisig_payload\"\n  } : entryFunctionPayload;\n}\n\n// src/PairingClient.ts\n\n\n\n\n\n\n// src/errors.ts\nvar SignatureRequestError = class _SignatureRequestError extends Error {\n  constructor(status) {\n    super(status);\n    this.name = \"SignatureRequestError\";\n    Object.setPrototypeOf(this, _SignatureRequestError.prototype);\n  }\n};\nvar UnexpectedSignatureResponseError = class _UnexpectedSignatureResponseError extends Error {\n  constructor(missingFields) {\n    const message = `Missing the following fields: ${missingFields.join(\", \")}`;\n    super(message);\n    this.name = \"UnexpectedSignatureResponseError\";\n    Object.setPrototypeOf(this, _UnexpectedSignatureResponseError.prototype);\n  }\n};\nvar PairingExpiredError = class _PairingExpiredError extends Error {\n  constructor() {\n    super();\n    this.name = \"PairingExpiredError\";\n    Object.setPrototypeOf(this, _PairingExpiredError.prototype);\n  }\n};\nvar UnregisteredDappError = class _UnregisteredDappError extends Error {\n  constructor() {\n    super(\"Dapp ID is invalid or not associated with a registered Dapp.\");\n    this.name = \"UnregisteredDappError\";\n    Object.setPrototypeOf(this, _UnregisteredDappError.prototype);\n  }\n};\n\n// src/state.ts\nvar DAPP_PAIRINGS_WINDOW_STORAGE_KEY = \"icDappPairings\";\nvar windowStateAccessors = {\n  async get(address) {\n    const pairings = await this.getAll();\n    return pairings[address];\n  },\n  async getAll() {\n    const serialized = window.localStorage.getItem(DAPP_PAIRINGS_WINDOW_STORAGE_KEY);\n    return serialized ? JSON.parse(serialized) : {};\n  },\n  async update(address, pairing) {\n    const pairings = await this.getAll();\n    if (pairing === void 0) {\n      delete pairings[address];\n    } else {\n      pairings[address] = pairing;\n    }\n    const newSerialized = JSON.stringify(pairings);\n    window.localStorage.setItem(DAPP_PAIRINGS_WINDOW_STORAGE_KEY, newSerialized);\n  }\n};\n\n// src/utils.ts\nvar SIGN_MESSAGE_RESPONSE_REQUIRED_FIELDS = [\n  \"address\",\n  \"application\",\n  \"chainId\",\n  \"fullMessage\",\n  \"message\",\n  \"nonce\",\n  \"prefix\",\n  \"signature\"\n];\nfunction validateSignMessageResponse(response) {\n  const providedFields = new Set(Object.keys(response));\n  const missingFields = SIGN_MESSAGE_RESPONSE_REQUIRED_FIELDS.filter((field) => !providedFields.has(field));\n  if (missingFields.length > 0) {\n    throw new UnexpectedSignatureResponseError(missingFields);\n  }\n}\nvar SIGN_AND_SUBMIT_TRANSACTION_RESPONSE_REQUIRED_FIELDS = [\"hash\"];\nfunction validateSignAndSubmitTransactionResponse(response) {\n  const providedFields = new Set(Object.keys(response));\n  const missingFields = SIGN_AND_SUBMIT_TRANSACTION_RESPONSE_REQUIRED_FIELDS.filter(\n    (field) => !providedFields.has(field)\n  );\n  if (missingFields.length > 0) {\n    throw new UnexpectedSignatureResponseError(missingFields);\n  }\n}\n\n// src/PairingClient.ts\nvar API_VERSION = \"0.2.0\";\nvar SIGNING_REQUEST_POLLING_INTERVAL = 2500;\nvar SEQUENCE_NUMBER_MISMATCH_PATTERN = /^Sequence number mismatch, expected (?:\\S+ to be )?(\\d+)/;\nasync function waitFor(milliseconds) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\nasync function withRetries(requestFn, onError, retries = 1) {\n  for (let i = 0; i < retries; i += 1) {\n    try {\n      return await requestFn();\n    } catch (err) {\n      onError(err);\n    }\n  }\n  return requestFn();\n}\nvar ACPairingClient = class {\n  constructor({\n    accessors = windowStateAccessors,\n    axiosConfig,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET\n  } = {}) {\n    // endregion\n    this.onDisconnectListeners = /* @__PURE__ */ new Set();\n    this.accessors = accessors;\n    this.defaultNetworkName = defaultNetworkName;\n    this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"].create({\n      baseURL: DEFAULT_FRONTEND_URL,\n      ...axiosConfig\n    });\n    const isClientSideRendering = typeof window !== \"undefined\";\n    this.initPromise = isClientSideRendering ? this.syncFirstPairing() : void 0;\n  }\n  async getPairing(id) {\n    const response = await this.axiosInstance.get(`v1/pairing/${id}/`);\n    return response.data.data.pairing;\n  }\n  async syncFirstPairing() {\n    const pairings = await this.accessors.getAll();\n    const firstPairing = Object.values(pairings)[0];\n    if (firstPairing === void 0) {\n      return;\n    }\n    try {\n      const { dappSpecificWallet, maxDappSequenceNumber } = await this.getPairing(firstPairing.pairingId);\n      await this.accessors.update(firstPairing.accountAddress, {\n        ...firstPairing,\n        currSequenceNumber: maxDappSequenceNumber,\n        dappWalletId: dappSpecificWallet?.id\n      });\n    } catch (err) {\n      await this.accessors.update(firstPairing.accountAddress, void 0);\n    }\n  }\n  async createSigningRequest(pairing, type, networkName, requestBody) {\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    const accountTransportEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64);\n    let sequenceNumber = pairing.currSequenceNumber + 1;\n    return withRetries(\n      async () => {\n        const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(accountTransportEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n          sequenceNumber,\n          { apiVersion: API_VERSION, networkName, requestType: type },\n          requestBody\n        );\n        const response = await this.axiosInstance.post(\n          `v1/pairing/${pairing.pairingId}/signing-request/`,\n          requestEnvelope\n        );\n        await this.accessors.update(pairing.accountAddress, {\n          ...pairing,\n          currSequenceNumber: sequenceNumber\n        });\n        return response.data.data.signingRequest;\n      },\n      (err) => {\n        if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err)) {\n          const errorMessage = err.response?.data?.message;\n          const expectedSequenceNumber = errorMessage?.match(SEQUENCE_NUMBER_MISMATCH_PATTERN)?.[1];\n          if (expectedSequenceNumber !== void 0) {\n            sequenceNumber = Number(expectedSequenceNumber);\n            return;\n          }\n        }\n        throw err;\n      }\n    );\n  }\n  async getSigningRequest(id) {\n    const response = await this.axiosInstance.get(\n      `v1/signing-request/${id}/`,\n      {\n        validateStatus: (status) => status === 200 || status === 404\n      }\n    );\n    return response.data?.data?.signingRequest;\n  }\n  async deletePairing(pairingId, secretKey, publicKey) {\n    const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n      secretKey,\n      publicKey,\n      publicKey,\n      0,\n      // ignored\n      {},\n      {}\n    );\n    await this.axiosInstance.post(\n      `v1/pairing/${pairingId}/delete/`,\n      requestEnvelope,\n      { validateStatus: (status) => status === 204 || status === 404 }\n    );\n  }\n  async cancelSigningRequest(pairing, id) {\n    const sequenceNumber = pairing.currSequenceNumber;\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    const accountTransportEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64);\n    const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(accountTransportEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      sequenceNumber + 1,\n      {},\n      {}\n    );\n    const response = await this.axiosInstance.patch(\n      `v1/signing-request/${id}/cancel/`,\n      requestEnvelope\n    );\n    await this.accessors.update(pairing.accountAddress, {\n      ...pairing,\n      currSequenceNumber: sequenceNumber + 1\n    });\n    return response.data.data.signingRequest;\n  }\n  async signRequest(address, type, requestBody, { cancelToken, networkName } = {}) {\n    await this.initPromise;\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"The requested account is not paired\");\n    }\n    let signingRequest;\n    try {\n      signingRequest = await this.createSigningRequest(\n        pairing,\n        type,\n        networkName || this.defaultNetworkName,\n        requestBody\n      );\n      while (signingRequest.status === \"PENDING\") {\n        await waitFor(SIGNING_REQUEST_POLLING_INTERVAL);\n        if (cancelToken?.cancelled) {\n          signingRequest.status = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestStatus.CANCELLED;\n          break;\n        }\n        signingRequest = await this.getSigningRequest(signingRequest.id) ?? signingRequest;\n      }\n    } catch (err) {\n      if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err) && err.code === \"404\") {\n        await this.accessors.update(address, void 0);\n        for (const listener of this.onDisconnectListeners) {\n          listener(address);\n        }\n        throw new PairingExpiredError();\n      }\n      throw err;\n    }\n    if (signingRequest.status !== \"APPROVED\") {\n      throw new SignatureRequestError(signingRequest.status);\n    }\n    const decrypted = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decryptEnvelope)(\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)((0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64), _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)((0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64), _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      signingRequest.responseEnvelope\n    );\n    return decrypted.privateMessage;\n  }\n  // region Public API\n  /**\n   * Requests a connection to an account (internally known as pairing).\n   * @returns either the address of the connected account, or undefined if the\n   * connection was cancelled.\n   */\n  async addPairing({ publicKey, secretKey }, finalizedPairing) {\n    await this.accessors.update(finalizedPairing.account.accountAddress, {\n      accountAddress: finalizedPairing.account.accountAddress,\n      accountAlias: finalizedPairing.account.userSubmittedAlias ?? void 0,\n      accountPublicKeyB64: finalizedPairing.account.publicKeyB64,\n      accountTransportEd25519PublicKeyB64: finalizedPairing.account.transportEd25519PublicKeyB64,\n      currSequenceNumber: finalizedPairing.maxDappSequenceNumber,\n      dappEd25519PublicKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(publicKey.key),\n      dappEd25519SecretKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(secretKey.key),\n      dappWalletId: finalizedPairing.dappSpecificWalletId,\n      pairingId: finalizedPairing.id\n    });\n  }\n  async disconnect(address) {\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"The specified account is not paired\");\n    }\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    await this.deletePairing(\n      pairing.pairingId,\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey)\n    );\n    await this.accessors.update(address, void 0);\n    for (const listener of this.onDisconnectListeners) {\n      listener(address);\n    }\n  }\n  async signMessage(address, args, options) {\n    const response = await this.signRequest(\n      address,\n      _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_MESSAGE,\n      args,\n      options\n    );\n    validateSignMessageResponse(response);\n    return response;\n  }\n  async signTransaction(address, args, options) {\n    const serializedRequestArgs = (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.serializeSignTransactionRequestArgs)(args);\n    const serializedResponseArgs = await this.signRequest(address, _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_TRANSACTION, serializedRequestArgs, options);\n    return (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.deserializeSignTransactionResponseArgs)(serializedResponseArgs);\n  }\n  // endregion\n  async signAndSubmitTransaction(address, args, options) {\n    const serializedRequestArgs = (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.serializeSignAndSubmitTransactionRequestArgs)(args);\n    try {\n      const responseArgs = await this.signRequest(address, _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_AND_SUBMIT_TRANSACTION, serializedRequestArgs, options);\n      validateSignAndSubmitTransactionResponse(responseArgs);\n      return responseArgs;\n    } catch (e) {\n      if (e instanceof axios__WEBPACK_IMPORTED_MODULE_7__.AxiosError && e.response?.data?.message) {\n        throw new Error(e.response?.data?.message);\n      }\n      throw e;\n    }\n  }\n  async getConnectedAccounts() {\n    await this.initPromise;\n    const pairings = await this.accessors.getAll();\n    return Object.values(pairings).map(\n      ({ accountAddress, accountEd25519PublicKeyB64, accountPublicKeyB64 }) => ({\n        address: _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(accountAddress),\n        publicKey: accountPublicKeyB64 !== void 0 ? (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.deserializePublicKeyB64)(accountPublicKeyB64) : (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.deserializeEd25519PublicKeyB64)(accountEd25519PublicKeyB64)\n      })\n    );\n  }\n  onDisconnect(listener) {\n    this.onDisconnectListeners.add(listener);\n    return () => this.onDisconnectListeners.delete(listener);\n  }\n};\n\n// src/ACDappClient.ts\nvar ACDappClient = class {\n  constructor({\n    backendBaseURL,\n    dappId,\n    dappImageURI,\n    dappName,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET,\n    frontendBaseURL = DEFAULT_FRONTEND_URL,\n    provider = \"google\",\n    tgWebAppURL\n  } = {}) {\n    this.defaultNetworkName = defaultNetworkName;\n    this.dappInfo = {\n      domain: window.location.origin,\n      imageURI: dappImageURI,\n      name: dappName ?? document.title\n    };\n    this.transport = new _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__.WebWalletTransport(frontendBaseURL, provider, tgWebAppURL);\n    this.dappId = dappId;\n    this.pairingClient = new ACPairingClient({\n      axiosConfig: {\n        baseURL: backendBaseURL ?? frontendBaseURL\n      },\n      defaultNetworkName\n    });\n  }\n  // region Public API\n  async getKeylessAccounts() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async getIcAccounts() {\n    return this.pairingClient.getConnectedAccounts() ?? [];\n  }\n  async isIcAccount(address) {\n    const icAccounts = await this.getIcAccounts();\n    return icAccounts.find((account) => account.address.equals(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(address))) !== void 0;\n  }\n  async getConnectedAccounts() {\n    const keylessAccounts = await this.getKeylessAccounts();\n    const icAccounts = await this.getIcAccounts();\n    return [...keylessAccounts, ...icAccounts];\n  }\n  async disconnect(address) {\n    if (await this.isIcAccount(address)) {\n      const stringAddress = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(address).toString();\n      await this.pairingClient.disconnect(stringAddress);\n    } else {\n      const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.serialize(this.dappInfo);\n      await this.transport.sendRequest(serializedRequest);\n    }\n  }\n  async connect({\n    claimOptions,\n    preferredWalletName\n  } = {}) {\n    const dappKeypair = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.createEd25519KeyPair)();\n    const injectedPreferredWalletName = typeof window !== \"undefined\" ? window.AC_PREFERRED_WALLET_NAME : void 0;\n    const requestArgs = {\n      claimOptions,\n      dappEd25519PublicKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(dappKeypair.publicKey.key),\n      dappId: this.dappId,\n      preferredWalletName: preferredWalletName ?? injectedPreferredWalletName\n    };\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.serialize(this.dappInfo, requestArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n    if (response.args.status === \"approved\") {\n      const { account, pairing } = response.args.args;\n      if (pairing) {\n        await this.pairingClient.addPairing(dappKeypair, pairing);\n      }\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({ account });\n    }\n    return response.args;\n  }\n  async signIn(args) {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignInRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignInResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signMessage(args) {\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const { chainId } = args;\n      const network = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.chainIdToNetwork)(chainId);\n      let message;\n      let nonce;\n      try {\n        message = new TextDecoder().decode(args.message);\n        nonce = new TextDecoder().decode(args.nonce);\n      } catch (err) {\n        throw new Error(\"Only UTF-8 encoded text is supported when using IC\");\n      }\n      const { fullMessage, signature: hexSignature } = await this.pairingClient.signMessage(\n        signerAddress.toString(),\n        {\n          address: true,\n          application: true,\n          chainId: true,\n          message,\n          nonce\n        },\n        { networkName: network }\n      );\n      const signatureBytes = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Hex.fromHexInput(hexSignature).toUint8Array();\n      const signature = signatureBytes.length === _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Ed25519Signature.LENGTH ? new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Ed25519Signature(signatureBytes) : _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AnySignature.deserialize(new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Deserializer(signatureBytes));\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({\n        fullMessage,\n        signature\n      });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signTransaction(args) {\n    const normalizedArgs = \"transaction\" in args ? _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.normalizeArgs(args) : args;\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const {\n        expirationSecondsFromNow,\n        expirationTimestamp,\n        feePayer,\n        gasUnitPrice,\n        maxGasAmount,\n        network,\n        payload,\n        secondarySigners,\n        sender,\n        sequenceNumber\n      } = normalizedArgs;\n      if (feePayer !== void 0) {\n        throw new Error(\"Sponsored transaction not currently supported\");\n      }\n      if (secondarySigners && secondarySigners.length > 0) {\n        throw new Error(\"Multi-agent transactions not currently supported\");\n      }\n      if (!(\"bcsToBytes\" in payload)) {\n        throw new Error(\"Payload input format is only supported with Keyless accounts.\");\n      }\n      const responseArgs = await this.pairingClient.signTransaction(\n        signerAddress.toString(),\n        {\n          options: {\n            expirationSecondsFromNow,\n            expirationTimestamp,\n            gasUnitPrice,\n            maxGasAmount,\n            sender: sender?.address.toString(),\n            sequenceNumber: sequenceNumber !== void 0 ? Number(sequenceNumber) : void 0\n          },\n          payload\n        },\n        {\n          networkName: network\n        }\n      );\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({\n        authenticator: responseArgs.accountAuthenticator,\n        rawTransaction: responseArgs.rawTxn\n      });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.serialize(this.dappInfo, normalizedArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signAndSubmitTransaction(args) {\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const { expirationTimestamp, feePayer, gasUnitPrice, maxGasAmount, network } = args;\n      const aptosConfig = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AptosConfig({ network });\n      let convertedArgs;\n      if (feePayer !== void 0) {\n        const payload = await normalizePayloadForIC(args.payload, aptosConfig);\n        const rawTxn = await (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateRawTransaction)({\n          aptosConfig,\n          feePayerAddress: feePayer.address,\n          options: {\n            gasUnitPrice,\n            maxGasAmount\n          },\n          payload,\n          sender: signerAddress\n        });\n        convertedArgs = {\n          feePayerAuthenticator: feePayer.authenticator,\n          rawTxn: new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.FeePayerRawTransaction(rawTxn, [], feePayer.address)\n        };\n      } else {\n        const payload = normalizePayloadForIC(args.payload);\n        convertedArgs = {\n          options: {\n            expirationTimestamp,\n            gasUnitPrice,\n            maxGasAmount\n          },\n          payload\n        };\n      }\n      const { hash } = await this.pairingClient.signAndSubmitTransaction(signerAddress.toString(), convertedArgs, {\n        networkName: network\n      });\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({ txnHash: hash });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  // endregion\n};\n\n// src/ICDappClient.ts\n\n\n\n// src/prompt.ts\nvar DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nvar PROMPT_POLLER_INTERVAL = 500;\nfunction openPrompt(url, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width\n  };\n  const strOptions = Object.entries(options).map(([key, value]) => `${key}=${JSON.stringify(value)}`).reduce((acc, entry) => `${acc}, ${entry}`);\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, void 0, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n  return promptWindow;\n}\nasync function waitForPromptResponse(promptWindow) {\n  return new Promise((resolve) => {\n    const listeners = {\n      onMessage: (message) => {\n        if (message.source !== promptWindow) {\n          return;\n        }\n        window.removeEventListener(\"message\", listeners.onMessage);\n        clearTimeout(listeners.promptPollerId);\n        resolve({\n          args: message.data,\n          status: \"approved\"\n        });\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve({\n            status: \"dismissed\"\n          });\n        }\n      }, PROMPT_POLLER_INTERVAL)\n    };\n    window.addEventListener(\"message\", listeners.onMessage);\n  });\n}\n\n// src/ICDappClient.ts\nvar ICDappClient = class extends ACPairingClient {\n  constructor(dappId, { frontendBaseURL = DEFAULT_FRONTEND_URL, ...pairingClientConfig } = {}) {\n    super(pairingClientConfig);\n    this.dappId = dappId;\n    this.frontendBaseURL = frontendBaseURL;\n  }\n  async createPairingRequest(dappEd25519PublicKeyB64) {\n    try {\n      const response = await this.axiosInstance.post(\"v1/pairing/\", {\n        dappEd25519PublicKeyB64,\n        dappId: this.dappId\n      });\n      return response.data.data.pairing;\n    } catch (err) {\n      if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err) && err.response?.data?.message === \"Dapp not found\") {\n        throw new UnregisteredDappError();\n      }\n      throw err;\n    }\n  }\n  // region Public API\n  /**\n   * Requests a connection to an account (internally known as pairing).\n   * @returns either the address of the connected account, or undefined if the\n   * connection was cancelled.\n   */\n  async connect() {\n    const { publicKey, secretKey } = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.createEd25519KeyPair)();\n    const dappEd25519PublicKeyB64 = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(publicKey.key);\n    const url = new URL(`${this.frontendBaseURL}/pairing`);\n    const promptWindow = await openPrompt(url.href);\n    let pairingId;\n    try {\n      const pendingPairing = await this.createPairingRequest(dappEd25519PublicKeyB64);\n      pairingId = pendingPairing.id;\n    } catch (err) {\n      promptWindow.close();\n      throw err;\n    }\n    url.searchParams.set(\"pairingId\", pairingId);\n    promptWindow.location.href = url.href;\n    const promptResponse = await waitForPromptResponse(promptWindow);\n    if (promptResponse.status === \"dismissed\") {\n      void this.deletePairing(pairingId, secretKey, publicKey);\n      return void 0;\n    }\n    const finalizedPairing = promptResponse.args;\n    await this.addPairing({ publicKey, secretKey }, finalizedPairing);\n    return finalizedPairing.account.accountAddress;\n  }\n  async offboard(address) {\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"This account is not paired\");\n    }\n    const walletId = pairing.dappWalletId;\n    if (walletId === void 0) {\n      throw new Error(\"This account cannot be offboarded\");\n    }\n    const url = new URL(`${this.frontendBaseURL}/offboarding?walletId=${walletId}`);\n    const promptWindow = openPrompt(url);\n    const response = await waitForPromptResponse(promptWindow);\n    if (response.status === \"approved\" && response.args.offboarded) {\n      this.disconnect(address);\n      return true;\n    }\n    return false;\n  }\n  // endregion\n};\n\n// src/KeylessClient.ts\n\n\n\nvar ACKeylessClient = class {\n  constructor({\n    dappImageURI,\n    dappName,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET,\n    frontendBaseURL = DEFAULT_FRONTEND_URL,\n    provider = \"google\"\n  } = {}) {\n    this.defaultNetworkName = defaultNetworkName;\n    this.dappInfo = {\n      domain: window.location.origin,\n      imageURI: dappImageURI,\n      name: dappName ?? document.title\n    };\n    this.transport = new _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__.WebWalletTransport(frontendBaseURL, provider);\n  }\n  // region Public API\n  async isConnected() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async getConnectedAccounts() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async disconnect() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.serialize(this.dappInfo);\n    await this.transport.sendRequest(serializedRequest);\n  }\n  async connect() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signMessage(args) {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signTransaction(args) {\n    const normalizedArgs = \"transaction\" in args ? _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.normalizeArgs(args) : args;\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.serialize(this.dappInfo, normalizedArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signAndSubmitTransaction(args) {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  // endregion\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/dapp-sdk/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@aptos-connect/web-transport/dist/index.mjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@identity-connect/dapp-sdk/node_modules/@aptos-connect/web-transport/dist/index.mjs ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebWalletTransport: () => (/* binding */ WebWalletTransport)\n/* harmony export */ });\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _telegram_apps_bridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @telegram-apps/bridge */ \"(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@telegram-apps/bridge/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n// src/index.ts\n\n\n// src/prompt.ts\n\nvar DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nvar PROMPT_POLLER_INTERVAL = 500;\nvar dismissalSerializedResponse = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.serialize({ status: \"dismissed\" });\nvar PromptUnauthorizedError = class extends Error {\n  constructor() {\n    super(\"Unauthorized\");\n  }\n};\nfunction openPrompt(url, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width\n  };\n  const strOptions = Object.entries(options).map(([key, value]) => `${key}=${JSON.stringify(value)}`).reduce((acc, entry) => `${acc}, ${entry}`);\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, void 0, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n  return promptWindow;\n}\nasync function waitForPromptResponse(baseUrl, promptWindow) {\n  return new Promise((resolve, reject) => {\n    const listeners = {\n      onMessage: (message) => {\n        if (message.source !== promptWindow || message.origin !== baseUrl) {\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptUnauthorizedErrorMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          reject(new PromptUnauthorizedError());\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptOpenerPingRequestMessage, message.data)) {\n          promptWindow.postMessage(new _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptOpenerPingResponseMessage(), baseUrl);\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptApprovalResponseMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(message.data.serializedValue);\n        }\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(dismissalSerializedResponse);\n        }\n      }, PROMPT_POLLER_INTERVAL)\n    };\n    window.addEventListener(\"message\", listeners.onMessage);\n  });\n}\n\n// src/state.ts\n\n\nvar localDappStateKey = \"@aptos-connect/dapp-local-state\";\nfunction serializeLocalDappState(state) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Serializer();\n  serializer.serializeU32AsUleb128(state.connectedAccounts.length);\n  for (const account of state.connectedAccounts) {\n    (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.serializeAccountInfo)(serializer, account);\n  }\n  return serializer.toUint8Array();\n}\nfunction deserializeLocalDappState(serializedValue) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Deserializer(serializedValue);\n  const connectedAccountsLength = deserializer.deserializeUleb128AsU32();\n  const connectedAccounts = [];\n  for (let i = 0; i < connectedAccountsLength; i += 1) {\n    connectedAccounts.push((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.deserializeAccountInfo)(deserializer));\n  }\n  return { connectedAccounts };\n}\nfunction getState() {\n  const encodedValue = window.localStorage.getItem(localDappStateKey);\n  return encodedValue ? deserializeLocalDappState((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(encodedValue)) : { connectedAccounts: [] };\n}\nfunction setState(state) {\n  const serializedValue = serializeLocalDappState(state);\n  const encodedValue = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(serializedValue);\n  window.localStorage.setItem(localDappStateKey, encodedValue);\n}\nfunction getConnectedAccounts() {\n  const state = getState();\n  return state.connectedAccounts;\n}\nfunction addConnectedAccount(account) {\n  const { connectedAccounts, ...state } = getState();\n  connectedAccounts.push(account);\n  setState({ ...state, connectedAccounts });\n}\nfunction removeConnectedAccount(address) {\n  const { connectedAccounts, ...state } = getState();\n  const index = connectedAccounts.findIndex((a) => a.address.equals(address));\n  if (index >= 0) {\n    connectedAccounts.splice(index, 1);\n  }\n  setState({ ...state, connectedAccounts });\n}\n\n// src/telegram/openTelegramPrompt.ts\n\n\n\n\n// src/telegram/createWalletRequest.ts\n\nasync function createWalletRequest(baseUrl, request) {\n  const encodedClientIdentityKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64url)(request.clientIdentityKey.toUint8Array());\n  const response = await fetch(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/`, {\n    body: JSON.stringify({\n      body: (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodeWalletRequestBody)(request.body),\n      id: request.id,\n      signature: (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(request.signature.toUint8Array()),\n      timestamp: request.timestamp\n    }),\n    headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\n    method: \"post\"\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed creating the wallet request\");\n  }\n}\n\n// src/telegram/getClientIdentityKey.ts\n\nvar identityKeyStorageKey = \"@aptos-connect/client-identity-key\";\nfunction getClientIdentityKey() {\n  const serialized = window.localStorage.getItem(identityKeyStorageKey);\n  if (serialized) {\n    return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Ed25519PrivateKey(serialized);\n  }\n  const identityKey = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Ed25519PrivateKey.generate();\n  window.localStorage.setItem(identityKeyStorageKey, identityKey.toString());\n  return identityKey;\n}\n\n// src/telegram/getWalletResponse.ts\n\n\n// src/telegram/smartPolling.ts\nvar ON_RESUME_DELAY = 300;\nvar FG_RESPONSE_POLLING_INTERVAL = 2e3;\nvar BG_RESPONSE_POLLING_INTERVAL = 3e3;\nvar POLLING_TIMEOUT = 5 * 6e4;\nfunction waitFor(milliseconds) {\n  let timeoutId;\n  let cancel = () => {\n  };\n  const timer = new Promise((resolve) => {\n    timeoutId = setTimeout(resolve, milliseconds);\n    cancel = () => {\n      clearTimeout(timeoutId);\n      resolve();\n    };\n  });\n  timer.cancel = cancel;\n  return timer;\n}\nasync function smartPolling(callback) {\n  let timer;\n  let justResumed = false;\n  let pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  const onWindowFocus = () => {\n    justResumed = true;\n    pollingInterval = FG_RESPONSE_POLLING_INTERVAL;\n    timer?.cancel();\n  };\n  const onWindowBlur = () => {\n    pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  };\n  window.addEventListener(\"focus\", onWindowFocus);\n  window.addEventListener(\"blur\", onWindowBlur);\n  try {\n    const startTime = Date.now();\n    while (Date.now() - startTime < POLLING_TIMEOUT) {\n      timer = waitFor(pollingInterval);\n      await timer;\n      if (justResumed) {\n        timer = waitFor(ON_RESUME_DELAY);\n        await timer;\n      }\n      const response = await callback();\n      if (response.status === 200) {\n        return response;\n      }\n      justResumed = false;\n    }\n    throw new Error(\"Timeout\");\n  } finally {\n    window.removeEventListener(\"focus\", onWindowFocus);\n    window.removeEventListener(\"blur\", onWindowFocus);\n  }\n}\n\n// src/telegram/getWalletResponse.ts\nasync function getWalletResponse(baseUrl, clientIdentityKey, requestId) {\n  const encodedClientIdentityKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64url)(clientIdentityKey.toUint8Array());\n  const url = new URL(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/${requestId}/response/`);\n  const response = await smartPolling(\n    () => fetch(url, {\n      headers: { Accept: \"application/json\" },\n      method: \"get\"\n    })\n  );\n  const responseBody = await response.json();\n  const data = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(responseBody.data.body);\n  return { data };\n}\n\n// src/telegram/openTelegramPrompt.ts\nasync function openTelegramPrompt(args) {\n  const { baseUrl, request: body, tgWebAppUrl = \"/AptosConnectBot/AptosConnect\" } = args;\n  const identityKey = getClientIdentityKey();\n  const clientIdentityKey = identityKey.publicKey();\n  const requestId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n  const timestamp = Date.now();\n  const challenge = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makePopupWalletRequestChallenge)({ body, id: requestId, timestamp });\n  const signature = identityKey.sign(challenge);\n  const signedWalletRequest = {\n    body,\n    clientIdentityKey,\n    id: requestId,\n    signature,\n    timestamp\n  };\n  let encodedRequest = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodePopupWalletRequest)(signedWalletRequest);\n  if (encodedRequest.length > 1024) {\n    void createWalletRequest(baseUrl, signedWalletRequest);\n    encodedRequest = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodePopupWalletRequest)({\n      clientIdentityKey,\n      id: requestId,\n      signature,\n      timestamp\n    });\n  }\n  (0,_telegram_apps_bridge__WEBPACK_IMPORTED_MODULE_3__.postEvent)(\"web_app_open_tg_link\", {\n    path_full: `${tgWebAppUrl}?startapp=${encodedRequest}`\n  });\n  return getWalletResponse(baseUrl, clientIdentityKey, requestId);\n}\n\n// src/telegram/index.ts\nfunction isTelegramMiniApp() {\n  return window.TelegramWebviewProxy !== void 0;\n}\n\n// src/index.ts\nvar WebWalletTransport = class {\n  constructor(baseUrl, provider = \"google\", tgWebAppUrl) {\n    this.baseUrl = baseUrl;\n    this.provider = provider;\n    this.tgWebAppUrl = tgWebAppUrl;\n    this.baseUrl = baseUrl;\n  }\n  async sendPromptRequest(request) {\n    if (isTelegramMiniApp()) {\n      return openTelegramPrompt({\n        baseUrl: this.baseUrl,\n        request,\n        tgWebAppUrl: this.tgWebAppUrl\n      });\n    }\n    const url = new URL(`${this.baseUrl}/prompt/`);\n    url.searchParams.set(\"request\", (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.urlEncodeWalletRequest)(request));\n    url.searchParams.set(\"provider\", this.provider);\n    const prompt = openPrompt(url);\n    return waitForPromptResponse(this.baseUrl, prompt);\n  }\n  async sendRequest(request) {\n    switch (request.name) {\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedResponse.serialize(connectedAccounts.length > 0);\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.serialize(connectedAccounts);\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n        if (response.args.status === \"approved\") {\n          const { account, pairing } = response.args.args;\n          if (pairing === void 0) {\n            addConnectedAccount(account);\n          }\n        }\n        return serializedResponse;\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignInRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignInResponse.deserialize(serializedResponse);\n        if (response.args.status === \"approved\") {\n          const { account } = response.args.args;\n          addConnectedAccount(account);\n        }\n        return serializedResponse;\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.name: {\n        const [activeAccount] = getConnectedAccounts();\n        if (activeAccount) {\n          removeConnectedAccount(activeAccount.address);\n        }\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectResponse.serialize({});\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.name:\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.name:\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.name: {\n        return this.sendPromptRequest(request);\n      }\n      default: {\n        throw new Error(\"Unexpected request\");\n      }\n    }\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@aptos-connect/web-transport/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@telegram-apps/bridge/dist/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@identity-connect/dapp-sdk/node_modules/@telegram-apps/bridge/dist/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $debug: () => (/* binding */ ae),\n/* harmony export */   $targetOrigin: () => (/* binding */ ue),\n/* harmony export */   CancelablePromise: () => (/* binding */ w),\n/* harmony export */   ERR_ABORTED: () => (/* binding */ re),\n/* harmony export */   ERR_CANCELED: () => (/* binding */ ne),\n/* harmony export */   ERR_CUSTOM_METHOD_ERR_RESPONSE: () => (/* binding */ Ke),\n/* harmony export */   ERR_METHOD_PARAMETER_UNSUPPORTED: () => (/* binding */ He),\n/* harmony export */   ERR_METHOD_UNSUPPORTED: () => (/* binding */ Je),\n/* harmony export */   ERR_RETRIEVE_LP_FAILED: () => (/* binding */ Be),\n/* harmony export */   ERR_TIMED_OUT: () => (/* binding */ oe),\n/* harmony export */   ERR_UNKNOWN_ENV: () => (/* binding */ Ge),\n/* harmony export */   EnhancedPromise: () => (/* binding */ S),\n/* harmony export */   TypedError: () => (/* binding */ b),\n/* harmony export */   addEventListener: () => (/* binding */ te),\n/* harmony export */   camelToKebab: () => (/* binding */ ct),\n/* harmony export */   camelToSnake: () => (/* binding */ it),\n/* harmony export */   captureSameReq: () => (/* binding */ et),\n/* harmony export */   compareVersions: () => (/* binding */ tt),\n/* harmony export */   createAbortError: () => (/* binding */ M),\n/* harmony export */   createCbCollector: () => (/* binding */ k),\n/* harmony export */   createLogger: () => (/* binding */ ke),\n/* harmony export */   createPostEvent: () => (/* binding */ dt),\n/* harmony export */   createTypedErrorPredicate: () => (/* binding */ L),\n/* harmony export */   defineEventHandlers: () => (/* binding */ bt),\n/* harmony export */   deleteCssVar: () => (/* binding */ ft),\n/* harmony export */   emitMiniAppsEvent: () => (/* binding */ x),\n/* harmony export */   getStorageValue: () => (/* binding */ xe),\n/* harmony export */   hasWebviewProxy: () => (/* binding */ Q),\n/* harmony export */   invokeCustomMethod: () => (/* binding */ Et),\n/* harmony export */   isAbortError: () => (/* binding */ ot),\n/* harmony export */   isCanceledError: () => (/* binding */ st),\n/* harmony export */   isIframe: () => (/* binding */ Ne),\n/* harmony export */   isTMA: () => (/* binding */ _t),\n/* harmony export */   isTimeoutError: () => (/* binding */ nt),\n/* harmony export */   mockTelegramEnv: () => (/* binding */ lt),\n/* harmony export */   off: () => (/* binding */ wt),\n/* harmony export */   on: () => (/* binding */ Fe),\n/* harmony export */   postEvent: () => (/* binding */ pe),\n/* harmony export */   removeEventHandlers: () => (/* binding */ gt),\n/* harmony export */   request: () => (/* binding */ fe),\n/* harmony export */   resetPackageState: () => (/* binding */ yt),\n/* harmony export */   retrieveLaunchParams: () => (/* binding */ Ye),\n/* harmony export */   setCssVar: () => (/* binding */ pt),\n/* harmony export */   setStorageValue: () => (/* binding */ We),\n/* harmony export */   sleep: () => (/* binding */ at),\n/* harmony export */   snakeToCamel: () => (/* binding */ ut),\n/* harmony export */   subscribe: () => (/* binding */ ht),\n/* harmony export */   supports: () => (/* binding */ H),\n/* harmony export */   unsubscribe: () => (/* binding */ mt)\n/* harmony export */ });\nclass d extends Error {\n  constructor(t, r, n) {\n    super(\n      typeof r == \"object\" ? r.message : r || t,\n      {\n        cause: typeof r == \"object\" ? r.cause : n\n      }\n    ), this.type = t, this.name = \"TypedError\", Object.setPrototypeOf(this, d.prototype);\n  }\n}\nfunction G(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction we(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\nconst he = \"ERR_INVALID_VALUE\", me = \"ERR_UNEXPECTED_VALUE\", de = \"ERR_UNEXPECTED_TYPE\", K = \"ERR_PARSE\";\nfunction V(e, t) {\n  const r = {};\n  for (const n in e) {\n    const o = e[n];\n    if (!o)\n      continue;\n    let s, a;\n    typeof o == \"function\" ? (s = n, a = o) : [s, a] = o;\n    try {\n      const c = a(t(s));\n      c !== void 0 && (r[n] = c);\n    } catch (c) {\n      throw new d(\n        K,\n        `Parser for \"${n}\" property failed${s === n ? \"\" : `. Source field: \"${s}\"`}`,\n        c\n      );\n    }\n  }\n  return r;\n}\nfunction Z(e) {\n  let t = e;\n  if (typeof t == \"string\")\n    try {\n      t = JSON.parse(t);\n    } catch (r) {\n      throw new d(he, { cause: r });\n    }\n  if (typeof t != \"object\" || !t || Array.isArray(t))\n    throw new d(me);\n  return t;\n}\nfunction g(e, t) {\n  return (r) => {\n    const n = (o) => {\n      if (!(r && o === void 0))\n        try {\n          return t(o);\n        } catch (s) {\n          throw new d(K, {\n            message: `\"${e}\" transformer failed to parse the value`,\n            cause: s\n          });\n        }\n    };\n    return /* @__PURE__ */ Object.assign(\n      n,\n      {\n        isValid(o) {\n          try {\n            return n(o), !0;\n          } catch {\n            return !1;\n          }\n        }\n      }\n    );\n  };\n}\nfunction l(e, t) {\n  return g(t || \"object\", (r) => {\n    const n = Z(r);\n    return V(e, (o) => n[o]);\n  });\n}\nfunction R(e) {\n  throw new d(de, `Unexpected value received: ${JSON.stringify(e)}`);\n}\nconst $ = g(\"boolean\", (e) => {\n  if (typeof e == \"boolean\")\n    return e;\n  const t = String(e);\n  if (t === \"1\" || t === \"true\")\n    return !0;\n  if (t === \"0\" || t === \"false\")\n    return !1;\n  R(e);\n}), _ = g(\"string\", (e) => {\n  if (typeof e == \"string\" || typeof e == \"number\")\n    return e.toString();\n  R(e);\n}), P = g(\"number\", (e) => {\n  if (typeof e == \"number\")\n    return e;\n  if (typeof e == \"string\") {\n    const t = Number(e);\n    if (!Number.isNaN(t))\n      return t;\n  }\n  R(e);\n}), Ee = g(\"date\", (e) => e instanceof Date ? e : new Date(P()(e) * 1e3));\nfunction z(e, t) {\n  return g(t || \"searchParams\", (r) => {\n    typeof r != \"string\" && !(r instanceof URLSearchParams) && R(r);\n    const n = typeof r == \"string\" ? new URLSearchParams(r) : r;\n    return V(e, (o) => {\n      const s = n.get(o);\n      return s === null ? void 0 : s;\n    });\n  });\n}\nfunction j(e) {\n  for (const t in e)\n    e[t] = [G(t), e[t]];\n  return e;\n}\nconst ye = (e) => {\n  const t = P(), r = P(!0), n = _(), o = _(!0), s = $(!0), a = l(j({\n    addedToAttachmentMenu: s,\n    allowsWriteToPm: s,\n    firstName: n,\n    id: t,\n    isBot: s,\n    isPremium: s,\n    languageCode: o,\n    lastName: o,\n    photoUrl: o,\n    username: o\n  }), \"User\")(!0);\n  return z(\n    j({\n      authDate: Ee(),\n      canSendAfter: r,\n      chat: l(\n        j({\n          id: t,\n          type: n,\n          title: n,\n          photoUrl: o,\n          username: o\n        }),\n        \"Chat\"\n      )(!0),\n      chatInstance: o,\n      chatType: o,\n      hash: n,\n      queryId: o,\n      receiver: a,\n      startParam: o,\n      signature: n,\n      user: a\n    }),\n    \"initData\"\n  )(e);\n};\nfunction ve(e) {\n  return /^#[\\da-f]{6}$/i.test(e);\n}\nfunction Pe(e) {\n  return /^#[\\da-f]{3}$/i.test(e);\n}\nfunction Re(e) {\n  const t = e.replace(/\\s/g, \"\").toLowerCase();\n  if (ve(t))\n    return t;\n  if (Pe(t)) {\n    let n = \"#\";\n    for (let o = 0; o < 3; o += 1)\n      n += t[1 + o].repeat(2);\n    return n;\n  }\n  const r = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!r)\n    throw new Error(`Value \"${e}\" does not satisfy any of known RGB formats.`);\n  return r.slice(1).reduce((n, o) => {\n    const s = parseInt(o, 10).toString(16);\n    return n + (s.length === 1 ? \"0\" : \"\") + s;\n  }, \"#\");\n}\nconst Te = g(\"rgb\", (e) => Re(_()(e))), I = g(\n  \"themeParams\",\n  (e) => {\n    const t = Te(!0);\n    return Object.entries(Z(e)).reduce((r, [n, o]) => (r[we(n)] = t(o), r), {});\n  }\n);\n// @__NO_SIDE_EFFECTS__\nfunction W(e) {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object.entries(e).map(([t, r]) => [G(t), r])\n    )\n  );\n}\nconst Ae = (e) => {\n  const t = _(), r = _(!0), n = $(!0);\n  return z({\n    botInline: [\"tgWebAppBotInline\", n],\n    defaultColors: [\"tgWebAppDefaultColors\", I(!0)],\n    fullscreen: [\"tgWebAppFullscreen\", n],\n    initData: [\"tgWebAppData\", ye(!0)],\n    initDataRaw: [\"tgWebAppData\", r],\n    platform: [\"tgWebAppPlatform\", t],\n    showSettings: [\"tgWebAppShowSettings\", n],\n    startParam: [\"tgWebAppStartParam\", r],\n    themeParams: [\"tgWebAppThemeParams\", I()],\n    version: [\"tgWebAppVersion\", t]\n  }, \"launchParams\")(e);\n};\n// @__NO_SIDE_EFFECTS__\nfunction Se(e) {\n  const {\n    initDataRaw: t,\n    startParam: r,\n    showSettings: n,\n    botInline: o,\n    fullscreen: s,\n    defaultColors: a\n  } = e, c = new URLSearchParams();\n  return c.set(\"tgWebAppPlatform\", e.platform), c.set(\"tgWebAppThemeParams\", /* @__PURE__ */ W(e.themeParams)), c.set(\"tgWebAppVersion\", e.version), t && c.set(\"tgWebAppData\", t), r && c.set(\"tgWebAppStartParam\", r), typeof n == \"boolean\" && c.set(\"tgWebAppShowSettings\", n ? \"1\" : \"0\"), typeof o == \"boolean\" && c.set(\"tgWebAppBotInline\", o ? \"1\" : \"0\"), typeof s == \"boolean\" && c.set(\"tgWebAppFullscreen\", s ? \"1\" : \"0\"), a && c.set(\"tgWebAppDefaultColors\", /* @__PURE__ */ W(a)), c.toString();\n}\nconst X = l({\n  eventType: _(),\n  eventData: (e) => e\n}, \"miniAppsMessage\"), Y = g(\"fn\", (e) => {\n  if (typeof e == \"function\")\n    return e;\n  R(e);\n});\nfunction $e(e) {\n  return !!e && typeof e == \"object\" && !Array.isArray(e);\n}\nconst Ce = l({\n  TelegramWebviewProxy: l({ postEvent: Y() })()\n});\nfunction Q(e) {\n  return Ce().isValid(e);\n}\nfunction Ne() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nvar De = Object.defineProperty, je = (e, t, r) => t in e ? De(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, ee = (e, t, r) => je(e, typeof t != \"symbol\" ? t + \"\" : t, r);\nclass b extends Error {\n  constructor(t, r, n) {\n    super(\n      typeof r == \"object\" ? r.message : r || t,\n      {\n        cause: typeof r == \"object\" ? r.cause : n\n      }\n    ), this.type = t, this.name = \"TypedError\", Object.setPrototypeOf(this, b.prototype);\n  }\n}\nfunction te(e, t, r) {\n  return e.addEventListener(t, r), () => e.removeEventListener(t, r);\n}\nfunction k(...e) {\n  const t = e.flat(1);\n  return [\n    t.push.bind(t),\n    () => {\n      t.forEach((r) => {\n        r();\n      });\n    }\n  ];\n}\nfunction Ue(e, t) {\n  return e instanceof b && e.type === t;\n}\nfunction L(e) {\n  return (t) => Ue(t, e);\n}\nconst re = \"ERR_ABORTED\", ne = \"ERR_CANCELED\", oe = \"ERR_TIMED_OUT\";\nfunction M(e) {\n  return new b(re, { cause: e });\n}\nconst nt = L(oe), ot = L(re), st = L(ne);\nfunction F(e, t) {\n  return e.reject = t.reject, e;\n}\nclass w extends Promise {\n  constructor(t, r) {\n    let n, o;\n    typeof t == \"function\" ? (n = t, o = r) : o = t;\n    let s, a;\n    super((c, i) => {\n      o || (o = {});\n      const { abortSignal: u } = o;\n      if (u && u.aborted)\n        return i(M(u.reason));\n      const [f, h] = k(), m = (E) => (...ge) => (h(), E(...ge)), T = new AbortController(), { signal: A } = T;\n      a = m((E) => {\n        T.abort(E), i(E);\n      }), s = m(c), u && f(\n        te(u, \"abort\", () => {\n          a(M(u.reason));\n        })\n      );\n      const { timeout: D } = o;\n      if (D) {\n        const E = setTimeout(() => {\n          a(new b(oe, `Timeout reached: ${D}ms`));\n        }, D);\n        f(() => {\n          clearTimeout(E);\n        });\n      }\n      n && n(s, a, A);\n    }), ee(this, \"reject\"), this.reject = a;\n  }\n  /**\n   * Creates a new BetterPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, r) {\n    return new w((n, o, s) => {\n      try {\n        const a = t(s);\n        return a instanceof Promise ? a.then(n, o) : n(a);\n      } catch (a) {\n        o(a);\n      }\n    }, r);\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new w((r) => {\n      r(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new w((r, n) => {\n      n(t);\n    });\n  }\n  /**\n   * Cancels the promise execution.\n   */\n  cancel() {\n    this.reject(new b(ne));\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return F(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, r) {\n    return F(super.then(t, r), this);\n  }\n}\nfunction J(e, t) {\n  return e.resolve = t.resolve, e;\n}\nclass S extends w {\n  constructor(t, r) {\n    let n, o;\n    typeof t == \"function\" ? (n = t, o = r) : o = t;\n    let s;\n    super((a, c, i) => {\n      s = a, n && n(a, c, i);\n    }, o), ee(this, \"resolve\"), this.resolve = s;\n  }\n  /**\n   * Creates a new EnhancedPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, r) {\n    return new S(\n      (n, o, s) => w.withFn(t, { abortSignal: s }).then(n, o),\n      r\n    );\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new S((r) => {\n      r(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new S((r, n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return J(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, r) {\n    return J(super.then(t, r), this);\n  }\n}\nfunction at(e, t) {\n  return new w((r) => {\n    setTimeout(r, e);\n  }, { abortSignal: t });\n}\nfunction se(e) {\n  return `tapps/${e}`;\n}\nfunction We(e, t) {\n  sessionStorage.setItem(se(e), JSON.stringify(t));\n}\nfunction xe(e) {\n  const t = sessionStorage.getItem(se(e));\n  try {\n    return t ? JSON.parse(t) : void 0;\n  } catch {\n  }\n}\nfunction ct(e) {\n  return e.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`);\n}\nfunction it(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction ut(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\n// @__NO_SIDE_EFFECTS__\nfunction ke(e, t) {\n  t || (t = {});\n  const {\n    textColor: r,\n    bgColor: n,\n    shouldLog: o = !0\n  } = t;\n  function s(a, ...c) {\n    if (!o || typeof o == \"function\" && !o())\n      return;\n    const i = \"font-weight:bold;padding:0 5px;border-radius:5px\";\n    console[a](\n      `%c${Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(/* @__PURE__ */ new Date())}%c / %c${e}`,\n      `${i};background-color: lightblue;color:black`,\n      \"\",\n      `${i};${r ? `color:${r};` : \"\"}${n ? `background-color:${n}` : \"\"}`,\n      ...c\n    );\n  }\n  return [\n    function(...a) {\n      s(\"log\", ...a);\n    },\n    function(...a) {\n      s(\"error\", ...a);\n    }\n  ];\n}\nfunction pt(e, t) {\n  document.documentElement.style.setProperty(e, t);\n}\nfunction ft(e) {\n  document.documentElement.style.removeProperty(e);\n}\nfunction Le(e, t) {\n  t();\n}\n// @__NO_SIDE_EFFECTS__\nfunction y(e, t) {\n  t || (t = {});\n  const r = t.equals || Object.is;\n  let n = [], o = e;\n  const s = (u) => {\n    if (!r(o, u)) {\n      const f = o;\n      o = u, Le(i, () => {\n        [...n].forEach(([h, m]) => {\n          h(u, f), m && c(h, !0);\n        });\n      });\n    }\n  };\n  function a(u) {\n    const f = typeof u != \"object\" ? { once: u } : u;\n    return {\n      once: f.once || !1,\n      signal: f.signal || !1\n    };\n  }\n  const c = (u, f) => {\n    const h = a(f), m = n.findIndex(([T, A]) => T === u && A.once === h.once && A.signal === h.signal);\n    m >= 0 && n.splice(m, 1);\n  }, i = Object.assign(\n    function() {\n      return Oe(i), o;\n    },\n    {\n      destroy() {\n        n = [];\n      },\n      set: s,\n      reset() {\n        s(e);\n      },\n      sub(u, f) {\n        return n.push([u, a(f)]), () => c(u, f);\n      },\n      unsub: c,\n      unsubAll() {\n        n = n.filter((u) => u[1].signal);\n      }\n    }\n  );\n  return i;\n}\nconst U = [];\nfunction Oe(e) {\n  U.length && U[U.length - 1].add(e);\n}\nconst ae = /* @__PURE__ */ y(!1), [O, qe] = /* @__PURE__ */ ke(\"Bridge\", {\n  bgColor: \"#9147ff\",\n  textColor: \"white\",\n  shouldLog: ae\n}), Ie = {\n  clipboard_text_received: l({\n    req_id: _(),\n    data: (e) => e === null ? e : _(!0)(e)\n  }, \"clipboard_text_received\"),\n  custom_method_invoked: l({\n    req_id: _(),\n    result: (e) => e,\n    error: _(!0)\n  }, \"custom_method_invoked\"),\n  popup_closed: g(\"popup_closed\", (e) => e ? l({\n    button_id: (t) => t == null ? void 0 : _()(t)\n  })()(e) : {}),\n  viewport_changed: l({\n    height: P(),\n    width: (e) => e == null ? window.innerWidth : P()(e),\n    is_state_stable: $(),\n    is_expanded: $()\n  }, \"viewport_changed\")\n};\nfunction Me(e) {\n  const t = window, [, r] = k(\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    te(t, \"message\", (n) => {\n      if (n.source !== t.parent)\n        return;\n      let o;\n      try {\n        o = X()(n.data);\n      } catch {\n        return;\n      }\n      const { eventType: s, eventData: a } = o, c = Ie[s];\n      try {\n        const i = c ? c()(a) : a;\n        O(\"Event received:\", i ? { eventType: s, eventData: i } : { eventType: s }), e([s, i]);\n      } catch (i) {\n        qe(\n          [\n            `An error occurred processing the \"${s}\" event from the Telegram application.`,\n            \"Please, file an issue here:\",\n            \"https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose\"\n          ].join(`\n`),\n          o,\n          i\n        );\n      }\n    })\n  );\n  return r;\n}\nconst C = /* @__PURE__ */ y(), N = /* @__PURE__ */ y();\nfunction ce() {\n  return N() || N.set(Me(C.set)), C;\n}\nconst v = /* @__PURE__ */ y({});\nfunction ie(e) {\n  let t = v()[e];\n  return t || (t = /* @__PURE__ */ y(void 0, {\n    equals() {\n      return !1;\n    }\n  }), ce().sub((r) => {\n    r && r[0] === e && t.set(r[1]);\n  }), v.set({ ...v(), [e]: t })), t;\n}\nfunction Fe(e, t, r) {\n  return ie(e).sub(t, r);\n}\nconst Je = \"ERR_METHOD_UNSUPPORTED\", Be = \"ERR_RETRIEVE_LP_FAILED\", He = \"ERR_METHOD_PARAMETER_UNSUPPORTED\", Ge = \"ERR_UNKNOWN_ENV\", Ke = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\", ue = /* @__PURE__ */ y(\"https://web.telegram.org\");\nfunction pe(e, t) {\n  O(\"Posting event:\", t ? { eventType: e, eventData: t } : { eventType: e });\n  const r = window;\n  if (Q(r)) {\n    r.TelegramWebviewProxy.postEvent(e, JSON.stringify(t));\n    return;\n  }\n  const n = JSON.stringify({ eventType: e, eventData: t });\n  if (Ne())\n    return r.parent.postMessage(n, ue());\n  const { external: o } = r;\n  if (l({ notify: Y() })().isValid(o)) {\n    o.notify(n);\n    return;\n  }\n  throw new b(Ge);\n}\nfunction fe(e, t, r) {\n  r || (r = {});\n  const { capture: n } = r, [o, s] = k();\n  return new w((a) => {\n    (Array.isArray(t) ? t : [t]).forEach((c) => {\n      o(\n        Fe(c, (i) => {\n          (!n || (Array.isArray(t) ? n({\n            event: c,\n            payload: i\n          }) : n(i))) && a(i);\n        })\n      );\n    }), (r.postEvent || pe)(e, r.params);\n  }, r).finally(s);\n}\nfunction q(e) {\n  return Ae()(e);\n}\nfunction _e(e) {\n  return q(\n    e.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\")\n  );\n}\nfunction Ve() {\n  return _e(window.location.href);\n}\nfunction Ze() {\n  const e = performance.getEntriesByType(\"navigation\")[0];\n  if (!e)\n    throw new Error(\"Unable to get first navigation entry.\");\n  return _e(e.name);\n}\nconst ze = \"launchParams\";\nfunction Xe() {\n  return q(xe(ze) || \"\");\n}\nfunction le(e) {\n  We(\"launchParams\", /* @__PURE__ */ Se(e));\n}\nfunction be(e) {\n  return e instanceof Error ? e.message + (e.cause ? `\n  ${be(e.cause)}` : \"\") : JSON.stringify(e);\n}\nfunction Ye() {\n  const e = [];\n  for (const t of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed, and then the page was reloaded.\n    Ve,\n    // Then, try using the lower level API - window.performance.\n    Ze,\n    // Finally, try to extract launch parameters from the session storage.\n    Xe\n  ])\n    try {\n      const r = t();\n      return le(r), r;\n    } catch (r) {\n      e.push(r);\n    }\n  throw new b(Be, [\n    \"Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?\",\n    \"📖 Refer to docs for more information:\",\n    \"https://docs.telegram-mini-apps.com/packages/telegram-apps-bridge/environment\",\n    \"Collected errors:\",\n    ...e.map((t) => `— ${be(t)}`)\n  ].join(`\n`));\n}\nfunction _t(e) {\n  if (e === \"simple\")\n    try {\n      return Ye(), !0;\n    } catch {\n      return !1;\n    }\n  return w.withFn(async () => {\n    if (Q(window))\n      return !0;\n    try {\n      return await fe(\"web_app_request_theme\", \"theme_changed\", { timeout: 100 }), !0;\n    } catch {\n      return !1;\n    }\n  }, e);\n}\nfunction x(e, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({ eventType: e, eventData: t }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction Qe(e, t) {\n  if (typeof t == \"string\")\n    try {\n      const { eventType: r } = X()(t);\n      r === \"web_app_request_theme\" && x(\"theme_changed\", {\n        theme_params: JSON.parse(/* @__PURE__ */ W(e))\n      }), r === \"web_app_request_viewport\" && x(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    } catch {\n    }\n}\nfunction lt(e) {\n  var n;\n  const t = typeof e == \"string\" ? q(e) : e;\n  le(t);\n  const r = (n = window.TelegramWebviewProxy) == null ? void 0 : n.postEvent;\n  window.TelegramWebviewProxy = {\n    postEvent(o, s) {\n      Qe(t.themeParams, JSON.stringify({ eventType: o, eventData: s })), r == null || r(o, s);\n    }\n  }, O(\"Environment was mocked by the mockTelegramEnv function\");\n}\nfunction bt() {\n  [\n    [\"TelegramGameProxy_receiveEvent\"],\n    // Windows Phone.\n    [\"TelegramGameProxy\", \"receiveEvent\"],\n    // Desktop.\n    [\"Telegram\", \"WebView\", \"receiveEvent\"]\n    // Android and iOS.\n  ].forEach((e) => {\n    let t = window;\n    e.forEach((r, n, o) => {\n      if (n === o.length - 1) {\n        t[r] = x;\n        return;\n      }\n      r in t || (t[r] = {}), t = t[r];\n    });\n  });\n}\nfunction gt() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach((e) => {\n    delete window[e];\n  });\n}\nfunction wt(e, t, r) {\n  ie(e).unsub(t, r);\n}\nfunction ht(e, t) {\n  return ce().sub(e, t);\n}\nfunction mt(e, t) {\n  C.unsub(e, t);\n}\nfunction et(e) {\n  return ({ req_id: t }) => t === e;\n}\nfunction B(e) {\n  return e.split(\".\").map(Number);\n}\nfunction tt(e, t) {\n  const r = B(e), n = B(t), o = Math.max(r.length, n.length);\n  for (let s = 0; s < o; s += 1) {\n    const a = r[s] || 0, c = n[s] || 0;\n    if (a !== c)\n      return a > c ? 1 : -1;\n  }\n  return 0;\n}\nfunction p(e, t) {\n  return tt(e, t) <= 0;\n}\nfunction H(e, t, r) {\n  if (typeof r == \"string\") {\n    if (e === \"web_app_open_link\") {\n      if (t === \"try_instant_view\")\n        return p(\"6.4\", r);\n      if (t === \"try_browser\")\n        return p(\"7.6\", r);\n    }\n    if (e === \"web_app_set_header_color\" && t === \"color\")\n      return p(\"6.9\", r);\n    if (e === \"web_app_close\" && t === \"return_back\")\n      return p(\"7.6\", r);\n    if (e === \"web_app_setup_main_button\" && t === \"has_shine_effect\")\n      return p(\"7.10\", r);\n  }\n  switch (e) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return p(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return p(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return p(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return p(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return p(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return p(\"6.10\", t);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return p(\"7.2\", t);\n    case \"web_app_setup_swipe_behavior\":\n      return p(\"7.7\", t);\n    case \"web_app_share_to_story\":\n      return p(\"7.8\", t);\n    case \"web_app_setup_secondary_button\":\n    case \"web_app_set_bottom_bar_color\":\n      return p(\"7.10\", t);\n    case \"web_app_request_safe_area\":\n    case \"web_app_request_content_safe_area\":\n    case \"web_app_request_fullscreen\":\n    case \"web_app_exit_fullscreen\":\n    case \"web_app_set_emoji_status\":\n    case \"web_app_add_to_home_screen\":\n    case \"web_app_check_home_screen\":\n    case \"web_app_request_emoji_status_access\":\n      return p(\"8.0\", t);\n    default:\n      return [\n        \"iframe_ready\",\n        \"iframe_will_reload\",\n        \"web_app_close\",\n        \"web_app_data_send\",\n        \"web_app_expand\",\n        \"web_app_open_link\",\n        \"web_app_ready\",\n        \"web_app_request_theme\",\n        \"web_app_request_viewport\",\n        \"web_app_setup_main_button\",\n        \"web_app_setup_closing_behavior\"\n      ].includes(e);\n  }\n}\nfunction dt(e, t) {\n  t || (t = \"strict\");\n  const r = typeof t == \"function\" ? t : (n) => {\n    const { method: o, version: s } = n;\n    let a, c;\n    if (\"param\" in n ? (a = `Parameter \"${n.param}\" of \"${o}\" method is unsupported in Mini Apps version ${s}`, c = He) : (a = `Method \"${o}\" is unsupported in Mini Apps version ${s}`, c = Je), t === \"strict\")\n      throw new b(c, a);\n    return console.warn(a);\n  };\n  return (n, o) => H(n, e) ? $e(o) && n === \"web_app_set_header_color\" && \"color\" in o && !H(n, \"color\", e) ? r({ version: e, method: n, param: \"color\" }) : pe(n, o) : r({ version: e, method: n });\n}\nfunction Et(e, t, r, n) {\n  return fe(\"web_app_invoke_custom_method\", \"custom_method_invoked\", {\n    ...n || {},\n    params: { method: e, params: t, req_id: r },\n    capture: et(r)\n  }).then(({ result: o, error: s }) => {\n    if (s)\n      throw new b(Ke, s);\n    return o;\n  });\n}\nfunction rt(e) {\n  e.unsubAll(), e.reset();\n}\nfunction yt() {\n  var e;\n  (e = N()) == null || e(), [\n    ...Object.values(v()),\n    v,\n    C,\n    N,\n    ue,\n    ae\n  ].forEach(rt);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/dapp-sdk/node_modules/@telegram-apps/bridge/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@identity-connect/wallet-api/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@identity-connect/wallet-api/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bcsDeserialize: () => (/* binding */ bcsDeserialize),\n/* harmony export */   bcsSerialize: () => (/* binding */ bcsSerialize),\n/* harmony export */   deserializeJsonTransactionPayload: () => (/* binding */ deserializeJsonTransactionPayload),\n/* harmony export */   deserializeRawTransaction: () => (/* binding */ deserializeRawTransaction),\n/* harmony export */   deserializeSignAndSubmitTransactionRequestArgs: () => (/* binding */ deserializeSignAndSubmitTransactionRequestArgs),\n/* harmony export */   deserializeSignTransactionRequestArgs: () => (/* binding */ deserializeSignTransactionRequestArgs),\n/* harmony export */   deserializeSignTransactionResponseArgs: () => (/* binding */ deserializeSignTransactionResponseArgs),\n/* harmony export */   isBcsSerializable: () => (/* binding */ isBcsSerializable),\n/* harmony export */   makeFullMessage: () => (/* binding */ makeFullMessage),\n/* harmony export */   serializeJsonTransactionPayload: () => (/* binding */ serializeJsonTransactionPayload),\n/* harmony export */   serializeRawTransaction: () => (/* binding */ serializeRawTransaction),\n/* harmony export */   serializeSignAndSubmitTransactionRequestArgs: () => (/* binding */ serializeSignAndSubmitTransactionRequestArgs),\n/* harmony export */   serializeSignTransactionRequestArgs: () => (/* binding */ serializeSignTransactionRequestArgs),\n/* harmony export */   serializeSignTransactionResponseArgs: () => (/* binding */ serializeSignTransactionResponseArgs)\n/* harmony export */ });\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aptos */ \"(ssr)/./node_modules/aptos/dist/index.mjs\");\n// src/serialization/bcsSerialization.ts\n\n\nfunction isBcsSerializableV1(value) {\n  return value?.serialize !== void 0;\n}\nfunction isBcsSerializableV2(value) {\n  return value?.serialize !== void 0 && value?.bcsToBytes !== void 0 && value?.bcsToHex !== void 0;\n}\nfunction isBcsSerializable(value) {\n  return isBcsSerializableV1(value) || isBcsSerializableV2(value);\n}\nfunction bcsSerialize(serializable) {\n  if (isBcsSerializableV2(serializable)) {\n    return serializable.bcsToHex().toString();\n  }\n  const serializedValueBytes = aptos__WEBPACK_IMPORTED_MODULE_1__.BCS.bcsToBytes(serializable);\n  return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(serializedValueBytes).toString();\n}\nfunction bcsDeserialize(deserializableClass, serializedValue) {\n  const serializedValueBytes = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexString(serializedValue).toUint8Array();\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(serializedValueBytes);\n  return deserializableClass.deserialize(deserializer);\n}\n\n// src/serialization/jsonPayload.ts\n\n\n// src/serialization/error.ts\nvar UnexpectedValueError = class _UnexpectedValueError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"UnexpectedValueError\";\n    Object.setPrototypeOf(this, _UnexpectedValueError.prototype);\n  }\n};\n\n// src/serialization/jsonPayload.ts\nfunction isSerializedUint8Array(arg) {\n  return arg?.type === \"Uint8Array\" && typeof arg?.value === \"string\";\n}\nfunction serializeEntryFunctionArg(arg) {\n  if (arg instanceof Uint8Array) {\n    return {\n      type: \"Uint8Array\",\n      value: _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(arg).toString()\n    };\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(serializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction deserializeEntryFunctionArg(arg) {\n  if (isSerializedUint8Array(arg)) {\n    return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(arg.value).toUint8Array();\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(deserializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction serializeEntryFunctionPayload(payload) {\n  const normalizedArgs = payload.arguments.map(serializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: normalizedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction deserializeEntryFunctionPayload(payload) {\n  const deserializedArgs = payload.arguments.map(deserializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: deserializedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction serializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return serializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? serializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return deserializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? deserializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/rawTxn.ts\n\nfunction serializeRawTransaction(rawTxn) {\n  const value = bcsSerialize(rawTxn);\n  if (\"fee_payer_address\" in rawTxn) {\n    return { type: \"fee_payer_raw_txn\", value };\n  }\n  if (\"secondary_signer_addresses\" in rawTxn) {\n    return { type: \"multi_agent_raw_txn\", value };\n  }\n  if (\"chain_id\" in rawTxn) {\n    return { type: \"raw_txn\", value };\n  }\n  throw new UnexpectedValueError(\"Invalid raw transaction type\");\n}\nfunction deserializeRawTransaction(serialized) {\n  switch (serialized.type) {\n    case \"raw_txn\":\n      return bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.RawTransaction, serialized.value);\n    case \"fee_payer_raw_txn\":\n      return bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.RawTransactionWithData, serialized.value);\n    case \"multi_agent_raw_txn\":\n      return bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.RawTransactionWithData, serialized.value);\n    default:\n      throw new UnexpectedValueError(\"Invalid raw transaction type\");\n  }\n}\n\n// src/serialization/signAndSubmitTransactionRequestArgs.ts\n\nfunction serializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    return {\n      feePayerAuthenticator: bcsSerialize(args.feePayerAuthenticator),\n      rawTxn: serializeRawTransaction(args.rawTxn)\n    };\n  }\n  if (\"rawTxn\" in args) {\n    return { rawTxn: serializeRawTransaction(args.rawTxn) };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionPayload, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    const feePayerAuthenticator = bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAuthenticator, args.feePayerAuthenticator);\n    return { feePayerAuthenticator, rawTxn: deserializedRawTxn };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionRequestArgs.ts\n\nfunction serializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if (\"rawTxn\" in args) {\n    const serializedRawTxn = serializeRawTransaction(args.rawTxn);\n    return { rawTxn: serializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionPayload, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionResponseArgs.ts\n\nfunction serializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsSerialize(args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsSerialize(args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\nfunction deserializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAuthenticator, args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsDeserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.RawTransaction, args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\n\n// src/utils/makeFullMessage.ts\nvar prefix = \"APTOS\";\nfunction makeFullMessage(params, flags) {\n  let fullMessage = prefix;\n  if (flags.address) {\n    fullMessage += `\naddress: ${params.address}`;\n  }\n  if (flags.application) {\n    fullMessage += `\napplication: ${params.application}`;\n  }\n  if (flags.chainId) {\n    fullMessage += `\nchainId: ${params.chainId}`;\n  }\n  fullMessage += `\nmessage: ${params.message}`;\n  fullMessage += `\nnonce: ${params.nonce}`;\n  return {\n    fullMessage,\n    prefix\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@identity-connect/wallet-api/dist/index.mjs\n");

/***/ })

};
;